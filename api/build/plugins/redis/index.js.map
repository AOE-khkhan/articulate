{"version":3,"sources":["../../../server/plugins/redis/index.js"],"names":["name","logger","require","module","exports","pkg","Package","register","server","options","host","port","retry","retryTimeout","prefix","retryStrategy","settings","info","JSON","stringify","error","code","attempt","process","exit","Promise","resolve","reject","client","Redis","createClient","retry_strategy","once","app","redis","path","__dirname","on","err"],"mappings":";;AAAA;;AACA;;AACA;;;;AAEA,MAAMA,IAAI,GAAG,OAAb;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,mBAAD,CAAP,CAA6B;AAAEF,EAAAA,IAAI,EAAG,UAASA,IAAK;AAAvB,CAA7B,CAAf;;AAEAG,MAAM,CAACC,OAAP,GAAiB;AACbJ,EAAAA,IADa;AAEbK,EAAAA,GAAG,EAAEC,gBAFQ;;AAGb,QAAMC,QAAN,CAAeC,MAAf,EAAuBC,OAAvB,EAAgC;AAAA,UAEpBC,IAFoB,GAEwBD,OAFxB,CAEpBC,IAFoB;AAAA,UAEdC,IAFc,GAEwBF,OAFxB,CAEdE,IAFc;AAAA,UAERC,KAFQ,GAEwBH,OAFxB,CAERG,KAFQ;AAAA,UAEDC,YAFC,GAEwBJ,OAFxB,CAEDI,YAFC;AAAA,UAEaC,MAFb,GAEwBL,OAFxB,CAEaK,MAFb;;AAI5B,UAAMC,aAAa,GAAIC,QAAD,IAAc;AAEhCf,MAAAA,MAAM,CAACgB,IAAP,CAAa,yBAAwBC,IAAI,CAACC,SAAL,CAAeH,QAAf,CAAyB,EAA9D;;AACA,UAAIA,QAAQ,CAACI,KAAT,IAAkBJ,QAAQ,CAACI,KAAT,CAAeC,IAAf,KAAwB,cAA9C,EAA8D;AAC1DpB,QAAAA,MAAM,CAACgB,IAAP,CAAa,8BAA6BD,QAAQ,CAACM,OAAQ,OAAMV,KAAM,EAAvE;;AACA,YAAII,QAAQ,CAACM,OAAT,KAAqBV,KAAzB,EAAgC;AAC5BX,UAAAA,MAAM,CAACmB,KAAP,CAAa,kCAAb;AACAnB,UAAAA,MAAM,CAACmB,KAAP,CAAaJ,QAAQ,CAACI,KAAtB;AACA,iBAAOG,OAAO,CAACC,IAAR,CAAa,CAAb,CAAP;AACH;;AAED,eAAOX,YAAP;AAEH;;AACD,aAAOA,YAAP;AACH,KAfD;;AAgBA,UAAM,IAAIY,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAEnC,YAAMC,MAAM,GAAGC,eAAMC,YAAN,CAAmBnB,IAAnB,EAAyBD,IAAzB,EAA+B;AAAEqB,QAAAA,cAAc,EAAEhB;AAAlB,OAA/B,CAAf,CAFmC,CAGnC;;;AACAa,MAAAA,MAAM,CAACI,IAAP,CAAY,OAAZ,EAAqB,YAAY;AAE7B/B,QAAAA,MAAM,CAACgB,IAAP,CAAY,OAAZ;AACAT,QAAAA,MAAM,CAACyB,GAAP,CAAWjC,IAAX,IAAmB,MAAM,+BAAiB;AAAEkC,UAAAA,KAAK,EAAEN,MAAT;AAAiBO,UAAAA,IAAI,EAAG,GAAEC,SAAU,SAApC;AAA8CtB,UAAAA;AAA9C,SAAjB,CAAzB;AACAY,QAAAA,OAAO;AACV,OALD,EAJmC,CAWnC;;AACAE,MAAAA,MAAM,CAACS,EAAP,CAAU,OAAV,EAAoBC,GAAD,IAAS;AAExBrC,QAAAA,MAAM,CAACmB,KAAP,CAAakB,GAAb;AACAX,QAAAA,MAAM,CAACW,GAAD,CAAN;AACH,OAJD;AAKH,KAjBK,CAAN;AAkBArC,IAAAA,MAAM,CAACgB,IAAP,CAAY,YAAZ;AACH;;AA1CY,CAAjB","sourcesContent":["import Redis from 'redis';\nimport Package from '../../../package.json';\nimport InitializeModels from './lib/initialize-models';\n\nconst name = 'redis';\nconst logger = require('../../util/logger')({ name: `plugin:${name}` });\n\nmodule.exports = {\n    name,\n    pkg: Package,\n    async register(server, options) {\n\n        const { host, port, retry, retryTimeout, prefix } = options;\n\n        const retryStrategy = (settings) => {\n\n            logger.info(`redis::retryStrategy::${JSON.stringify(settings)}`);\n            if (settings.error && settings.error.code === 'ECONNREFUSED') {\n                logger.info(`Connection failed. Attempt ${settings.attempt} of ${retry}`);\n                if (settings.attempt === retry) {\n                    logger.error('Failure during Redis connection ');\n                    logger.error(settings.error);\n                    return process.exit(1);\n                }\n\n                return retryTimeout;\n\n            }\n            return retryTimeout;\n        };\n        await new Promise((resolve, reject) => {\n\n            const client = Redis.createClient(port, host, { retry_strategy: retryStrategy });\n            // Wait for connection\n            client.once('ready', async () => {\n\n                logger.info('ready');\n                server.app[name] = await InitializeModels({ redis: client, path: `${__dirname}/models`, prefix });\n                resolve();\n            });\n\n            // Listen to errors\n            client.on('error', (err) => {\n\n                logger.error(err);\n                reject(err);\n            });\n        });\n        logger.info('registered');\n    }\n};\n"],"file":"index.js"}