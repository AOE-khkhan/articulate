{"version":3,"sources":["../../../server/plugins/redis-messaging/index.js"],"names":["name","logger","require","module","exports","pkg","Package","register","server","options","host","port","retry","retryTimeout","retryStrategy","settings","info","JSON","stringify","error","code","attempt","process","exit","Promise","resolve","reject","client","Redis","createClient","retry_strategy","once","Nohm","setPubSubClient","app","on","err"],"mappings":";;AAAA;;AACA;;AACA;;;;AAEA,MAAMA,IAAI,GAAG,iBAAb;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,mBAAD,CAAP,CAA6B;AAAEF,EAAAA,IAAI,EAAG,UAASA,IAAK;AAAvB,CAA7B,CAAf;;AAEAG,MAAM,CAACC,OAAP,GAAiB;AACbJ,EAAAA,IADa;AAEbK,EAAAA,GAAG,EAAEC,gBAFQ;;AAGb,QAAMC,QAAN,CAAeC,MAAf,EAAuBC,OAAvB,EAAgC;AAAA,UAEpBC,IAFoB,GAEgBD,OAFhB,CAEpBC,IAFoB;AAAA,UAEdC,IAFc,GAEgBF,OAFhB,CAEdE,IAFc;AAAA,UAERC,KAFQ,GAEgBH,OAFhB,CAERG,KAFQ;AAAA,UAEDC,YAFC,GAEgBJ,OAFhB,CAEDI,YAFC;;AAI5B,UAAMC,aAAa,GAAIC,QAAD,IAAc;AAEhCd,MAAAA,MAAM,CAACe,IAAP,CAAa,yBAAwBC,IAAI,CAACC,SAAL,CAAeH,QAAf,CAAyB,EAA9D;;AACA,UAAIA,QAAQ,CAACI,KAAT,IAAkBJ,QAAQ,CAACI,KAAT,CAAeC,IAAf,KAAwB,cAA9C,EAA8D;AAC1DnB,QAAAA,MAAM,CAACe,IAAP,CAAa,8BAA6BD,QAAQ,CAACM,OAAQ,OAAMT,KAAM,EAAvE;;AACA,YAAIG,QAAQ,CAACM,OAAT,KAAqBT,KAAzB,EAAgC;AAC5BX,UAAAA,MAAM,CAACkB,KAAP,CAAa,kCAAb;AACAlB,UAAAA,MAAM,CAACkB,KAAP,CAAaJ,QAAQ,CAACI,KAAtB;AACA,iBAAOG,OAAO,CAACC,IAAR,CAAa,CAAb,CAAP;AACH;;AAED,eAAOV,YAAP;AAEH;;AACD,aAAOA,YAAP;AACH,KAfD;;AAgBA,UAAM,IAAIW,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAEnC,YAAMC,MAAM,GAAGC,eAAMC,YAAN,CAAmBlB,IAAnB,EAAyBD,IAAzB,EAA+B;AAAEoB,QAAAA,cAAc,EAAEhB;AAAlB,OAA/B,CAAf,CAFmC,CAGnC;;;AACAa,MAAAA,MAAM,CAACI,IAAP,CAAY,OAAZ,EAAqB,YAAY;AAE7B9B,QAAAA,MAAM,CAACe,IAAP,CAAY,OAAZ;AACA,cAAMgB,cAAKC,eAAL,CAAqBN,MAArB,CAAN;AACAnB,QAAAA,MAAM,CAAC0B,GAAP,CAAWlC,IAAX,IAAmBgC,aAAnB;AACAP,QAAAA,OAAO;AACV,OAND,EAJmC,CAYnC;;AACAE,MAAAA,MAAM,CAACQ,EAAP,CAAU,OAAV,EAAoBC,GAAD,IAAS;AAExBnC,QAAAA,MAAM,CAACkB,KAAP,CAAaiB,GAAb;AACAV,QAAAA,MAAM,CAACU,GAAD,CAAN;AACH,OAJD;AAKH,KAlBK,CAAN;AAmBAnC,IAAAA,MAAM,CAACe,IAAP,CAAY,YAAZ;AACH;;AA3CY,CAAjB","sourcesContent":["import Nohm from 'nohm';\nimport Redis from 'redis';\nimport Package from '../../../package.json';\n\nconst name = 'redis-messaging';\nconst logger = require('../../util/logger')({ name: `plugin:${name}` });\n\nmodule.exports = {\n    name,\n    pkg: Package,\n    async register(server, options) {\n\n        const { host, port, retry, retryTimeout } = options;\n\n        const retryStrategy = (settings) => {\n\n            logger.info(`redis::retryStrategy::${JSON.stringify(settings)}`);\n            if (settings.error && settings.error.code === 'ECONNREFUSED') {\n                logger.info(`Connection failed. Attempt ${settings.attempt} of ${retry}`);\n                if (settings.attempt === retry) {\n                    logger.error('Failure during Redis connection ');\n                    logger.error(settings.error);\n                    return process.exit(1);\n                }\n\n                return retryTimeout;\n\n            }\n            return retryTimeout;\n        };\n        await new Promise((resolve, reject) => {\n\n            const client = Redis.createClient(port, host, { retry_strategy: retryStrategy });\n            // Wait for connection\n            client.once('ready', async () => {\n\n                logger.info('ready');\n                await Nohm.setPubSubClient(client);\n                server.app[name] = Nohm;\n                resolve();\n            });\n\n            // Listen to errors\n            client.on('error', (err) => {\n\n                logger.error(err);\n                reject(err);\n            });\n        });\n        logger.info('registered');\n    }\n};\n"],"file":"index.js"}