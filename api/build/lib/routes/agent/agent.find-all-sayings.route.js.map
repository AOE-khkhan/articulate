{"version":3,"sources":["../../../../server/lib/routes/agent/agent.find-all-sayings.route.js"],"names":["module","exports","method","path","ROUTE_AGENT","PARAM_AGENT_ID","ROUTE_SAYING","options","tags","validate","AgentValidator","findAllSayings","handler","request","services","agentService","id","params","query","skip","PARAM_SKIP","limit","PARAM_LIMIT","direction","PARAM_DIRECTION","field","PARAM_FIELD","filter","PARAM_FILTER","loadCategoryId","message","statusCode","Boom"],"mappings":";;AAAA;;AACA;;AAWA;;;;AAEAA,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,MAAM,EAAE,KADK;AAEbC,EAAAA,IAAI,EAAG,IAAGC,sBAAY,KAAIC,yBAAe,KAAIC,uBAAa,EAF7C;AAGbC,EAAAA,OAAO,EAAE;AACLC,IAAAA,IAAI,EAAE,CAAC,KAAD,CADD;AAELC,IAAAA,QAAQ,EAAEC,eAAeC,cAFpB;AAGLC,IAAAA,OAAO,EAAE,MAAOC,OAAP,IAAmB;AAAA,mBAEC,MAAMA,OAAO,CAACC,QAAR,EAFP;AAAA,YAEhBC,YAFgB,QAEhBA,YAFgB;;AAAA,YAGEC,EAHF,GAGSH,OAAO,CAACI,MAHjB,CAGfZ,yBAHe;AAAA,6BAWpBQ,OAAO,CAACK,KAXY;AAAA,YAKNC,IALM,kBAKnBC,qBALmB;AAAA,YAMLC,KANK,kBAMnBC,sBANmB;AAAA,YAODC,SAPC,kBAOnBC,0BAPmB;AAAA,YAQLC,KARK,kBAQnBC,sBARmB;AAAA,YASJC,MATI,kBASnBC,uBATmB;AAAA,YAUpBC,cAVoB,kBAUpBA,cAVoB;;AAYxB,UAAI;AACA,eAAO,MAAMd,YAAY,CAACJ,cAAb,CAA4B;AAAEK,UAAAA,EAAF;AAAMa,UAAAA,cAAN;AAAsBV,UAAAA,IAAtB;AAA4BE,UAAAA,KAA5B;AAAmCE,UAAAA,SAAnC;AAA8CE,UAAAA,KAA9C;AAAoDE,UAAAA;AAApD,SAA5B,CAAb;AACH,OAFD,CAGA,cAAgC;AAAA,YAAvBG,OAAuB,SAAvBA,OAAuB;AAAA,YAAdC,UAAc,SAAdA,UAAc;AAC5B,eAAO,IAAIC,aAAJ,CAASF,OAAT,EAAkB;AAAEC,UAAAA;AAAF,SAAlB,CAAP;AACH;AACJ;AArBI;AAHI,CAAjB","sourcesContent":["import Boom from 'boom';\nimport {\n    PARAM_AGENT_ID,\n    PARAM_DIRECTION,\n    PARAM_FIELD,\n    PARAM_FILTER,\n    PARAM_INCLUDE,\n    PARAM_LIMIT,\n    PARAM_SKIP,\n    ROUTE_AGENT,\n    ROUTE_SAYING\n} from '../../../util/constants';\nimport AgentValidator from '../../validators/agent.validator';\n\nmodule.exports = {\n    method: 'get',\n    path: `/${ROUTE_AGENT}/{${PARAM_AGENT_ID}}/${ROUTE_SAYING}`,\n    options: {\n        tags: ['api'],\n        validate: AgentValidator.findAllSayings,\n        handler: async (request) => {\n\n            const { agentService } = await request.services();\n            const { [PARAM_AGENT_ID]: id } = request.params;\n            const {\n                [PARAM_SKIP]: skip,\n                [PARAM_LIMIT]: limit,\n                [PARAM_DIRECTION]: direction,\n                [PARAM_FIELD]: field,\n                [PARAM_FILTER]: filter,\n                loadCategoryId\n            } = request.query;\n            try {\n                return await agentService.findAllSayings({ id, loadCategoryId, skip, limit, direction, field,filter });\n            }\n            catch ({ message, statusCode }) {\n                return new Boom(message, { statusCode });\n            }\n        }\n    }\n};\n"],"file":"agent.find-all-sayings.route.js"}