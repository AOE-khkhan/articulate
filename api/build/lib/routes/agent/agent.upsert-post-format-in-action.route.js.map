{"version":3,"sources":["../../../../server/lib/routes/agent/agent.upsert-post-format-in-action.route.js"],"names":["module","exports","method","path","ROUTE_AGENT","PARAM_AGENT_ID","ROUTE_ACTION","PARAM_ACTION_ID","ROUTE_POST_FORMAT","options","tags","validate","AgentValidator","addPostFormatInAction","handler","request","services","agentService","params","agentId","actionId","upsertPostFormatInAction","id","postFormatData","payload","message","statusCode","Boom"],"mappings":";;AAAA;;AACA;;AAOA;;;;AACA;AAEAA,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,MAAM,EAAE,CAAC,KAAD,EAAQ,MAAR,CADK;AAEbC,EAAAA,IAAI,EAAG,IAAGC,sBAAY,KAAIC,yBAAe,KAAIC,uBAAa,KAAIC,0BAAgB,KAAIC,4BAAkB,EAFvF;AAGbC,EAAAA,OAAO,EAAE;AACLC,IAAAA,IAAI,EAAE,CAAC,KAAD,CADD;AAELC,IAAAA,QAAQ,EAAEC,eAAeC,qBAFpB;AAGLC,IAAAA,OAAO,EAAE,MAAOC,OAAP,IAAmB;AAAA,mBAEC,MAAMA,OAAO,CAACC,QAAR,EAFP;AAAA,YAEhBC,YAFgB,QAEhBA,YAFgB;;AAAA,8BAMpBF,OAAO,CAACG,MANY;AAAA,YAIFC,OAJE,mBAInBd,yBAJmB;AAAA,YAKDe,QALC,mBAKnBb,0BALmB;;AAOxB,UAAI;AACA,eAAO,MAAMU,YAAY,CAACI,wBAAb,CAAsC;AAAEC,UAAAA,EAAE,EAAEH,OAAN;AAAeC,UAAAA,QAAf;AAAyBG,UAAAA,cAAc,EAAER,OAAO,CAACS;AAAjD,SAAtC,CAAb;AACH,OAFD,CAGA,cAAgC;AAAA,YAAvBC,OAAuB,SAAvBA,OAAuB;AAAA,YAAdC,UAAc,SAAdA,UAAc;AAC5B,eAAO,IAAIC,aAAJ,CAASF,OAAT,EAAkB;AAAEC,UAAAA;AAAF,SAAlB,CAAP;AACH;AACJ;AAhBI;AAHI,CAAjB","sourcesContent":["import Boom from 'boom';\nimport {\n    PARAM_ACTION_ID,\n    PARAM_AGENT_ID,\n    ROUTE_ACTION,\n    ROUTE_AGENT,\n    ROUTE_POST_FORMAT\n} from '../../../util/constants';\nimport AgentValidator from '../../validators/agent.validator';\n//const logger = require('../../../server/util/logger')({ name: `route:agent:create-webhook` });\n\nmodule.exports = {\n    method: ['put', 'post'],\n    path: `/${ROUTE_AGENT}/{${PARAM_AGENT_ID}}/${ROUTE_ACTION}/{${PARAM_ACTION_ID}}/${ROUTE_POST_FORMAT}`,\n    options: {\n        tags: ['api'],\n        validate: AgentValidator.addPostFormatInAction,\n        handler: async (request) => {\n\n            const { agentService } = await request.services();\n            const {\n                [PARAM_AGENT_ID]: agentId,\n                [PARAM_ACTION_ID]: actionId\n            } = request.params;\n            try {\n                return await agentService.upsertPostFormatInAction({ id: agentId, actionId, postFormatData: request.payload });\n            }\n            catch ({ message, statusCode }) {\n                return new Boom(message, { statusCode });\n            }\n        }\n    }\n};\n"],"file":"agent.upsert-post-format-in-action.route.js"}