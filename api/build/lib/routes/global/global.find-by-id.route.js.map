{"version":3,"sources":["../../../../server/lib/routes/global/global.find-by-id.route.js"],"names":["module","exports","ROUTE","method","path","PARAMS_POSTFIX_ID","options","tags","validate","params","Joi","string","required","description","ROUTE_TO_MODEL","handler","request","services","globalService","id","findById","model","message","statusCode","Boom"],"mappings":";;AAAA;;AACA;;AACA;;;;AAKA;AAEAA,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AAE5B,SAAO;AACHC,IAAAA,MAAM,EAAE,KADL;AAEHC,IAAAA,IAAI,EAAG,IAAGF,KAAM,KAAIA,KAAK,GAAGG,4BAAkB,GAF3C;AAGHC,IAAAA,OAAO,EAAE;AACLC,MAAAA,IAAI,EAAE,CAAC,KAAD,CADD;AAELC,MAAAA,QAAQ,EAAE;AACNC,QAAAA,MAAM,EAAE,CAAC,MAAM;AAEX,iBAAO;AACH,aAAE,GAAEP,KAAK,GAAGG,4BAAkB,EAA9B,GAAkCK,aAAIC,MAAJ,GAAaC,QAAb,GAAwBC,WAAxB,CAAqC,GAAEC,0BAAeZ,KAAf,CAAsB,KAA7D;AAD/B,WAAP;AAGH,SALO;AADF,OAFL;AAULa,MAAAA,OAAO,EAAE,MAAOC,OAAP,IAAmB;AAAA,qBAEE,MAAMA,OAAO,CAACC,QAAR,EAFR;AAAA,cAEhBC,aAFgB,QAEhBA,aAFgB;;AAAA,cAGkBC,EAHlB,GAGyBH,OAAO,CAACP,MAHjC,CAGd,GAAEP,KAAK,GAAGG,4BAAkB,EAHd;;AAIxB,YAAI;AACA,iBAAO,MAAMa,aAAa,CAACE,QAAd,CAAuB;AAAED,YAAAA,EAAF;AAAME,YAAAA,KAAK,EAAEP,0BAAeZ,KAAf;AAAb,WAAvB,CAAb;AACH,SAFD,CAGA,cAAgC;AAAA,cAAvBoB,OAAuB,SAAvBA,OAAuB;AAAA,cAAdC,UAAc,SAAdA,UAAc;AAE5B,iBAAO,IAAIC,aAAJ,CAASF,OAAT,EAAkB;AAAEC,YAAAA;AAAF,WAAlB,CAAP;AACH;AACJ;AArBI;AAHN,GAAP;AA2BH,CA7BD","sourcesContent":["import Boom from 'boom';\nimport Joi from 'joi';\nimport {\n    PARAMS_POSTFIX_ID,\n    ROUTE_TO_MODEL\n} from '../../../util/constants';\n\n//const logger = require('../../../server/util/logger')({ name: `route:global:search-by-field` });\n\nmodule.exports = ({ ROUTE }) => {\n\n    return {\n        method: 'get',\n        path: `/${ROUTE}/{${ROUTE + PARAMS_POSTFIX_ID}}`,\n        options: {\n            tags: ['api'],\n            validate: {\n                params: (() => {\n\n                    return {\n                        [`${ROUTE + PARAMS_POSTFIX_ID}`]: Joi.string().required().description(`${ROUTE_TO_MODEL[ROUTE]} id`)\n                    };\n                })()\n            },\n            handler: async (request) => {\n\n                const { globalService } = await request.services();\n                const { [`${ROUTE + PARAMS_POSTFIX_ID}`]: id } = request.params;\n                try {\n                    return await globalService.findById({ id, model: ROUTE_TO_MODEL[ROUTE] });\n                }\n                catch ({ message, statusCode }) {\n\n                    return new Boom(message, { statusCode });\n                }\n            }\n        }\n    };\n};\n"],"file":"global.find-by-id.route.js"}