{"version":3,"sources":["../../../../server/lib/routes/global/global.find-in-model-path.route.js"],"names":["validateConfiguration","models","isFindById","isSingleResult","_","isArray","length","Error","generateModelRouteMap","model","route","MODEL_TO_ROUTE","idName","PARAMS_POSTFIX_ID","path","module","exports","modelRouteMap","map","value","initial","push","last","method","join","options","tags","validate","query","GlobalValidator","findAll","params","validation","filteredMap","each","modeRoute","Joi","string","required","description","handler","request","services","globalService","getParametersFromRequest","id","skip","limit","direction","field","filter","modelPath","findInModelPath","message","statusCode","Boom"],"mappings":"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","sourcesContent":["import Boom from 'boom';\nimport Joi from 'joi';\nimport _ from 'lodash';\nimport {\n    MODEL_TO_ROUTE,\n    PARAMS_POSTFIX_ID\n} from '../../../util/constants';\nimport GlobalValidator from '../../validators/global.validator';\n\n//const logger = require('../../../server/util/logger')({ name: `route:global:find-all-related-models-in-path` });\n\nconst validateConfiguration = ({ models, isFindById, isSingleResult }) => {\n\n    if (!_.isArray(models) || models.length < 2) {\n        throw new Error('A related model path needs an array of at least 2 models');\n    }\n\n    if (isFindById && isSingleResult) {\n        throw new Error('Route can\\'t be configured findById and isSingleResult at the same time: \\n' +\n            'isFindById: false && isSingleResult: false -> (Find all linked models)         -> /{model}\\n' +\n            'isFindById: false && isSingleResult: true  -> (Find single linked model)       -> /{model}\\n' +\n            'isFindById: true  && isSingleResult: false -> (Find single linked model by id) -> /{model}/{modelId}\\n' +\n            'isFindById: true  && isSingleResult: true ->  (Error) -> ☠️\\n' +\n            '');\n    }\n};\nconst generateModelRouteMap = (model) => {\n\n    const route = MODEL_TO_ROUTE[model];\n    if (!route) {\n        throw new Error(`Model '${model}' doesn't have an assigned route.`);\n    }\n    const idName = `${route}${PARAMS_POSTFIX_ID}`;\n    const path = `${route}/{${idName}}`;\n    return {\n        model,\n        route,\n        idName,\n        path\n    };\n};\n\nmodule.exports = ({ models, isFindById = false, isSingleResult = false }) => {\n\n    validateConfiguration({ models, isFindById, isSingleResult });\n    const modelRouteMap = _(models).map(generateModelRouteMap).value();\n    const path = _(modelRouteMap).initial().map('path').value();\n    if (isFindById) {\n        path.push(_(modelRouteMap).last().path); // /{model}/{modelId}\n    }\n    else {\n        path.push(_(modelRouteMap).last().route); // /{model}\n    }\n\n    return {\n        method: 'get',\n        path: `/${path.join('/')}`,\n        options: {\n            tags: ['api'],\n            validate: {\n\n                query: (() => {\n\n                    if (!isFindById && !isSingleResult) {\n                        return GlobalValidator.findAll.query;\n                    }\n                    return null;\n                })(),\n                params: (() => {\n\n                    const validation = {};\n                    const filteredMap = isFindById ? _(modelRouteMap) : _(modelRouteMap).initial();\n                    filteredMap.each(\n                        (modeRoute) => {\n\n                            validation[modeRoute.idName] = Joi.string().required().description(`${modeRoute.model} id`);\n                        }\n                    );\n\n                    return validation;\n                })()\n            },\n\n            handler: async (request) => {\n\n                const { globalService } = await request.services();\n                const getParametersFromRequest = (modeRoute) => {\n\n                    const { model, idName } = modeRoute;\n                    const id = request.params[idName];\n                    return { model, id };\n                };\n                const { skip, limit, direction, field, filter } = request.query;\n                const modelPath = _(modelRouteMap).map(getParametersFromRequest).value();\n\n                try {\n                    return await globalService.findInModelPath({ modelPath, isFindById, isSingleResult, skip, limit, direction, field, filter });\n                }\n                catch ({ message, statusCode }) {\n\n                    return new Boom(message, { statusCode });\n                }\n            }\n        }\n    };\n};\n"],"file":"global.find-in-model-path.route.js"}