{"version":3,"sources":["../../../../server/lib/services/category/category.generate-training-data.service.js"],"names":["getCommonExamples","sayings","extraTrainingData","keywordsCombinations","categoryName","sayingsPerActions","_","uniq","flatten","map","saying","keywordsList","compact","keywords","keyword","extractor","length","keywordsOfSaying","keyOfKeywords","join","combinationsForThisSaying","combination","sayingText","userSays","lowestStart","start","newKeywordsList","shift","combinationValues","Array","isArray","forEach","i","textValue","keywordText","keywordValue","newStart","newEnd","replacementStart","replacementFinish","end","substring","push","value","entity","actions","actionName","undefined","text","intent","RASA_INTENT_SPLIT_SYMBOL","entities","tempKeyword","module","exports","server","services","keywordService","combinationsFromSayings","commonExamplesUserSayings","commonExamplesModifiersSayings","modifiersSayings","modifier","modifierName","actionsWithJustOneSaying","Object","keys","filter","Promise","reject","keywordSynonyms","synonyms","examples","example","result","synonym","keywordSynonym","regexs","ent","regex","name","keywordName","pattern","numberOfSayings","RASA_NLU_DATA","RASA_COMMON_EXAMPLES","concat","RASA_REGEX_FEATURES","RASA_ENTITY_SYNONYMS","error"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport {\n    RASA_COMMON_EXAMPLES,\n    RASA_ENTITY_SYNONYMS,\n    RASA_INTENT_SPLIT_SYMBOL,\n    RASA_NLU_DATA,\n    RASA_REGEX_FEATURES\n} from '../../../util/constants';\nimport InvalidActionSayingsCount from '../../errors/global.invalid-actions-sayings-count';\nimport RedisErrorHandler from '../../errors/redis.error-handler';\n\nconst getCommonExamples = (sayings, extraTrainingData, keywordsCombinations, categoryName, sayingsPerActions) => {\n\n    return _.uniq(_.flatten(_.map(sayings, (saying) => {\n\n        const keywordsList = _.compact(_.map(saying.keywords, (keyword) => {\n\n            return keyword.extractor ? null : keyword;\n        }));\n\n        if (keywordsList && keywordsList.length > 0) {\n            if (extraTrainingData) {\n                const keywordsOfSaying = _.map(keywordsList, 'keyword');\n                const keyOfKeywords = keywordsOfSaying.join('-');\n                let combinationsForThisSaying = keywordsCombinations[keyOfKeywords];\n                combinationsForThisSaying = combinationsForThisSaying.length === 1 ? _.flatten(combinationsForThisSaying) : combinationsForThisSaying;\n\n                return _.map(combinationsForThisSaying, (combination) => {\n\n                    let sayingText = saying.userSays;\n                    const lowestStart = keywordsList[0].start;\n                    const newKeywordsList = [];\n                    let shift = 0;\n                    const combinationValues = Array.isArray(combination) ? combination : [combination];\n\n                    keywordsList.forEach((keyword, i) => {\n\n                        const textValue = combinationValues[i].keywordText;\n                        const keywordValue = combinationValues[i].keywordValue;\n                        const newStart = lowestStart === keyword.start ? keyword.start : keyword.start + shift;\n                        const newEnd = newStart + textValue.length;\n                        const replacementStart = i === 0 ? keyword.start : newStart;\n                        const replacementFinish = i === 0 ? keyword.end : keyword.end + shift;\n                        sayingText = sayingText.substring(0, replacementStart) + textValue + sayingText.substring(replacementFinish);\n                        newKeywordsList.push({\n                            start: newStart,\n                            end: newEnd,\n                            value: keywordValue,\n                            entity: keyword.keyword\n                        });\n                        shift = newEnd - keyword.end;\n                    });\n\n                    if (!categoryName) {\n                        saying.actions.forEach((actionName) => {\n                            sayingsPerActions[actionName] = sayingsPerActions[actionName] === undefined ? 1 : sayingsPerActions[actionName] + 1;\n                        });\n                    }\n                    return {\n                        text: sayingText,\n                        intent: categoryName || saying.actions.join(RASA_INTENT_SPLIT_SYMBOL),\n                        entities: newKeywordsList\n                    };\n                });\n            }\n\n            const newKeywordsList = [];\n\n            keywordsList.forEach((tempKeyword) => {\n\n                newKeywordsList.push({\n                    start: tempKeyword.start,\n                    end: tempKeyword.end,\n                    value: tempKeyword.value,\n                    entity: tempKeyword.keyword\n                });\n            });\n\n            if (!categoryName) {\n                saying.actions.forEach((actionName) => {\n                    sayingsPerActions[actionName] = sayingsPerActions[actionName] === undefined ? 1 : sayingsPerActions[actionName] + 1;\n                });\n            }\n            return {\n                text: saying.userSays,\n                intent: categoryName || saying.actions.join(RASA_INTENT_SPLIT_SYMBOL),\n                entities: newKeywordsList\n            };\n        }\n\n        if (!categoryName) {\n            saying.actions.forEach((actionName) => {\n                sayingsPerActions[actionName] = sayingsPerActions[actionName] === undefined ? 1 : sayingsPerActions[actionName] + 1;\n            });\n        }\n        return {\n            text: saying.userSays,\n            intent: categoryName || saying.actions.join(RASA_INTENT_SPLIT_SYMBOL),\n            entities: []\n        };\n    })));\n};\n\nmodule.exports = async function ({ keywords, sayings, extraTrainingData, categoryName = null }) {\n\n    const {\n        keywordService\n    } = await this.server.services();\n\n    try {\n\n        let keywordsCombinations = [];\n        if (extraTrainingData && keywords.length > 0) {\n            keywordsCombinations = await keywordService.combinationsFromSayings({ keywords, sayings });\n        }\n        const sayingsPerActions = {};\n\n        let commonExamplesUserSayings = [];\n        if (sayings) {\n            commonExamplesUserSayings = getCommonExamples(sayings, extraTrainingData, keywordsCombinations, categoryName, sayingsPerActions);\n        }\n\n        let commonExamplesModifiersSayings = [];\n        if (!sayings) {\n            const modifiersSayings = _.flatten(_.map(_.flatten(_.map(keywords, 'modifiers')), (modifier) => {\n                return _.map(modifier.sayings, (saying) => {\n                    saying.actions = [modifier.modifierName];\n                    return saying;\n                });\n            }));\n            commonExamplesModifiersSayings = getCommonExamples(modifiersSayings, extraTrainingData, keywordsCombinations, categoryName, sayingsPerActions);\n        }\n\n        const actionsWithJustOneSaying = Object.keys(sayingsPerActions).filter((actionName) => {\n\n            return sayingsPerActions[actionName] === 1;\n        });\n        if (actionsWithJustOneSaying.length > 0) {\n            return Promise.reject(InvalidActionSayingsCount({ actions: actionsWithJustOneSaying }));\n        }\n\n        let keywordSynonyms = _.flatten(_.map(keywords, (keyword) => {\n\n            const synonyms = _.map(keyword.examples, (example) => {\n\n                const result = {};\n\n                result.value = example.value;\n                result.synonyms = _.filter(example.synonyms, (synonym) => {\n\n                    return synonym !== example.value;\n                });\n                return result;\n            });\n            return _.flatten(synonyms);\n        }));\n\n        keywordSynonyms = _.filter(keywordSynonyms, (keywordSynonym) => {\n\n            return keywordSynonym.synonyms.length > 0;\n        });\n\n        const regexs = [];\n        keywords.forEach((ent) => {\n\n            if (ent.regex && ent.regex !== '') {\n                regexs.push({ name: ent.keywordName, pattern: ent.regex });\n            }\n        });\n\n        return {\n            sayingsPerActions,\n            numberOfSayings: Object.keys(sayingsPerActions).length,\n            [RASA_NLU_DATA]: {\n                [RASA_COMMON_EXAMPLES]: commonExamplesUserSayings.concat(commonExamplesModifiersSayings),\n                [RASA_REGEX_FEATURES]: regexs,\n                [RASA_ENTITY_SYNONYMS]: keywordSynonyms\n            }\n        };\n    }\n    catch (error) {\n        throw RedisErrorHandler({ error });\n    }\n};\n"],"file":"category.generate-training-data.service.js"}