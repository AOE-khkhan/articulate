{"version":3,"sources":["../../../../server/lib/services/category/category.unlink-keywords.service.js"],"names":["module","exports","model","keywordModels","length","server","services","globalService","linkPromises","map","KeywordModel","keywordSayingIds","getAll","MODEL_SAYING","KeywordSayingModels","loadAllByIds","ids","belongsToPromises","SayingModel","belongsTo","sayingBelongsTo","Promise","all","_","findIndex","unlink","MODEL_CATEGORY","MODEL_KEYWORD","save","error"],"mappings":";;AAAA;;AACA;;AAKA;;;;AAEA;AAEAA,MAAM,CAACC,OAAP,GAAiB,gBAAgB;AAAEC,EAAAA,KAAF;AAASC,EAAAA,aAAa,GAAG;AAAzB,CAAhB,EAA+C;AAE5D,MAAIA,aAAa,CAACC,MAAd,KAAyB,CAA7B,EAAgC;AAC5B;AACH;;AAJ2D,eAKlC,MAAM,KAAKC,MAAL,CAAYC,QAAZ,EAL4B;AAAA,QAKpDC,aALoD,QAKpDA,aALoD;;AAM5D,MAAI;AACA,UAAMC,YAAY,GAAGL,aAAa,CAACM,GAAd,CAAkB,MAAOC,YAAP,IAAwB;AAE3D,YAAMC,gBAAgB,GAAG,MAAMD,YAAY,CAACE,MAAb,CAAoBC,uBAApB,EAAkCA,uBAAlC,CAA/B;AACA,YAAMC,mBAAmB,GAAG,MAAMP,aAAa,CAACQ,YAAd,CAA2B;AACzDC,QAAAA,GAAG,EAAEL,gBADoD;AAEzDT,QAAAA,KAAK,EAAEW;AAFkD,OAA3B,CAAlC;AAKA,YAAMI,iBAAiB,GAAGH,mBAAmB,CAACL,GAApB,CAAwB,MAAOS,WAAP,IAAuB;AAErE,eAAO,MAAMhB,KAAK,CAACiB,SAAN,CAAgBD,WAAhB,EAA6BL,uBAA7B,CAAb;AACH,OAHyB,CAA1B;AAKA,YAAMO,eAAe,GAAG,MAAMC,OAAO,CAACC,GAAR,CAAYL,iBAAZ,CAA9B,CAb2D,CAc3D;;AACA,UAAIG,eAAe,CAAChB,MAAhB,KAA2B,CAA3B,IAAgCmB,gBAAEC,SAAF,CAAYJ,eAAZ,MAAiC,CAArE,EAAwE;AACpE,cAAMV,YAAY,CAACe,MAAb,CAAoBvB,KAApB,EAA2BwB,yBAA3B,CAAN;AACA,cAAMxB,KAAK,CAACuB,MAAN,CAAaf,YAAb,EAA2BiB,wBAA3B,CAAN;AACA,eAAO,MAAMjB,YAAY,CAACkB,IAAb,EAAb;AACH;AACJ,KApBoB,CAArB;AAqBA,UAAMP,OAAO,CAACC,GAAR,CAAYd,YAAZ,CAAN;AACA,UAAMN,KAAK,CAAC0B,IAAN,EAAN;AACH,GAxBD,CAyBA,OAAOC,KAAP,EAAc;AACV,UAAM,oBAAkB;AAAEA,MAAAA;AAAF,KAAlB,CAAN;AACH;AAEJ,CAnCD","sourcesContent":["import _ from 'lodash';\nimport {\n    MODEL_CATEGORY,\n    MODEL_KEYWORD,\n    MODEL_SAYING\n} from '../../../util/constants';\nimport RedisErrorHandler from '../../errors/redis.error-handler';\n\n//const logger = require('../../../server/util/logger')({ name: `service:category:unlink-keywords` });\n\nmodule.exports = async function ({ model, keywordModels = [] }) {\n\n    if (keywordModels.length === 0) {\n        return;\n    }\n    const { globalService } = await this.server.services();\n    try {\n        const linkPromises = keywordModels.map(async (KeywordModel) => {\n\n            const keywordSayingIds = await KeywordModel.getAll(MODEL_SAYING, MODEL_SAYING);\n            const KeywordSayingModels = await globalService.loadAllByIds({\n                ids: keywordSayingIds,\n                model: MODEL_SAYING\n            });\n\n            const belongsToPromises = KeywordSayingModels.map(async (SayingModel) => {\n\n                return await model.belongsTo(SayingModel, MODEL_SAYING);\n            });\n\n            const sayingBelongsTo = await Promise.all(belongsToPromises);\n            // The sayings related to this keyword are not used in the same category\n            if (sayingBelongsTo.length === 0 || _.findIndex(sayingBelongsTo) === 0) {\n                await KeywordModel.unlink(model, MODEL_CATEGORY);\n                await model.unlink(KeywordModel, MODEL_KEYWORD);\n                return await KeywordModel.save();\n            }\n        });\n        await Promise.all(linkPromises);\n        await model.save();\n    }\n    catch (error) {\n        throw RedisErrorHandler({ error });\n    }\n\n};\n"],"file":"category.unlink-keywords.service.js"}