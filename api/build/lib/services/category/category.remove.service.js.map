{"version":3,"sources":["../../../../server/lib/services/category/category.remove.service.js"],"names":["module","exports","id","CategoryModel","AgentModel","redis","server","app","factory","MODEL_CATEGORY","categorySayingIds","getAll","MODEL_SAYING","length","categoryName","allProperties","Promise","reject","statusCode","message","property","STATUS_OUT_OF_DATE","saveInstance","removeInstance","error"],"mappings":";;AAAA;;AAKA;;AACA;;;;AAEAA,MAAM,CAACC,OAAP,GAAiB,gBAAgB;AAAEC,EAAAA,EAAF;AAAMC,EAAAA,aAAN;AAAqBC,EAAAA;AAArB,CAAhB,EAAmD;AAAA,QAExDC,KAFwD,GAE9C,KAAKC,MAAL,CAAYC,GAFkC,CAExDF,KAFwD;;AAGhE,MAAI;AACAF,IAAAA,aAAa,GAAGA,aAAa,KAAI,MAAME,KAAK,CAACG,OAAN,CAAcC,yBAAd,EAA8BP,EAA9B,CAAV,CAA7B;AACA,UAAMQ,iBAAiB,GAAG,MAAMP,aAAa,CAACQ,MAAd,CAAqBC,uBAArB,EAAmCA,uBAAnC,CAAhC;;AACA,QAAIF,iBAAiB,CAACG,MAAlB,GAA2B,CAA/B,EAAkC;AAC9B,YAAMC,YAAY,GAAG,MAAMX,aAAa,CAACY,aAAd,GAA8BD,YAAzD;AACA,aAAOE,OAAO,CAACC,MAAR,CAAe,qBAAmB;AACrCC,QAAAA,UAAU,EAAE,GADyB;AAErCC,QAAAA,OAAO,EAAG,aAAYL,YAAa,qBAAoBJ,iBAAiB,CAACG,MAAO;AAF3C,OAAnB,CAAf,CAAP;AAIH;;AAEDT,IAAAA,UAAU,CAACgB,QAAX,CAAoB,QAApB,EAA8BC,6BAA9B;AACA,UAAMjB,UAAU,CAACkB,YAAX,EAAN;AACA,WAAOnB,aAAa,CAACoB,cAAd,EAAP;AACH,GAdD,CAeA,OAAOC,KAAP,EAAc;AACV,UAAM,oBAAkB;AAAEA,MAAAA,KAAF;AAASL,MAAAA,OAAO,EAAG,gBAAejB,EAAG;AAArC,KAAlB,CAAN;AACH;AAEJ,CAtBD","sourcesContent":["import {\n    MODEL_CATEGORY,\n    MODEL_SAYING,\n    STATUS_OUT_OF_DATE\n} from '../../../util/constants';\nimport RedisErrorHandler from '../../errors/redis.error-handler';\nimport GlobalDefaultError from '../../errors/global.default-error';\n\nmodule.exports = async function ({ id, CategoryModel, AgentModel }) {\n\n    const { redis } = this.server.app;\n    try {\n        CategoryModel = CategoryModel || await redis.factory(MODEL_CATEGORY, id);\n        const categorySayingIds = await CategoryModel.getAll(MODEL_SAYING, MODEL_SAYING);\n        if (categorySayingIds.length > 0) {\n            const categoryName = await CategoryModel.allProperties().categoryName;\n            return Promise.reject(GlobalDefaultError({\n                statusCode: 400,\n                message: `Category '${categoryName}' is been used by ${categorySayingIds.length} sayings`\n            }));\n        }\n\n        AgentModel.property('status', STATUS_OUT_OF_DATE);\n        await AgentModel.saveInstance();\n        return CategoryModel.removeInstance();\n    }\n    catch (error) {\n        throw RedisErrorHandler({ error, message: `Category id=[${id}]` });\n    }\n\n};\n"],"file":"category.remove.service.js"}