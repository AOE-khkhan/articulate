{"version":3,"sources":["../../../../server/lib/services/global/global.find-in-model-path.service.js"],"names":["module","exports","modelPath","isFindById","isSingleResult","skip","limit","direction","field","filter","returnModel","redis","server","app","totalCount","findById","model","id","Model","factory","err","reducer","parentModel","current","index","sourceArray","ids","getAll","length","childModel","inDb","allProperties","Promise","reject","allResultsModels","findAllByIds","map","resultModel","belongs","belongsTo","isLast","mainType","modelName","mainId","subType","subId","data","reduce","error"],"mappings":";;AAAA;;AACA;;AACA;;;;;;;;AAEAA,MAAM,CAACC,OAAP,GAAiB,gBAAgB;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,UAAb;AAAyBC,EAAAA,cAAzB;AAAyCC,EAAAA,IAAzC;AAA+CC,EAAAA,KAA/C;AAAsDC,EAAAA,SAAtD;AAAiEC,EAAAA,KAAjE;AAAwEC,EAAAA,MAAxE;AAAgFC,EAAAA,WAAW,GAAG;AAA9F,CAAhB,EAAuH;AAEpI;AAFoI,QAI5HC,KAJ4H,GAIlH,KAAKC,MAAL,CAAYC,GAJsG,CAI5HF,KAJ4H;AAKpI,MAAIG,UAAU,GAAG,CAAjB;;AAEA,MAAI;AACA,UAAMC,QAAQ,GAAG,OAAO;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAP,KAAyB;AAEtC,UAAI;AACA,cAAMC,KAAK,GAAG,MAAMP,KAAK,CAACQ,OAAN,CAAcH,KAAd,EAAqBC,EAArB,CAApB;AACA,eAAO,MAAMC,KAAb;AACH,OAHD,CAIA,OAAOE,GAAP,EAAY;AACR,cAAM,qBAAe;AAAEJ,UAAAA,KAAF;AAASC,UAAAA;AAAT,SAAf,CAAN;AACH;AAEJ,KAVD;;AAYA,UAAMI,OAAO,GAAG,OAAOC,WAAP,EAAoBC,OAApB,EAA6BC,KAA7B,EAAoCC,WAApC,KAAoD;AAChE;AACA,UAAI,CAACH,WAAL,EAAkB;AACd;AACA,eAAO,MAAMP,QAAQ,CAACQ,OAAD,CAArB;AACH;;AAL+D,YAMxDP,KANwD,GAM1CO,OAN0C,CAMxDP,KANwD;AAAA,YAMjDC,EANiD,GAM1CM,OAN0C,CAMjDN,EANiD,EAOhE;;AACAK,MAAAA,WAAW,GAAG,MAAMA,WAApB,CARgE,CAUhE;;AACA,UAAI,CAACL,EAAL,EAAS;AAEL,cAAMS,GAAG,GAAG,MAAMJ,WAAW,CAACK,MAAZ,CAAmBX,KAAnB,EAA0BA,KAA1B,CAAlB;AACAF,QAAAA,UAAU,GAAGY,GAAG,CAACE,MAAjB,CAHK,CAKL;;AACA,cAAMC,UAAU,GAAG,MAAMd,QAAQ,CAAC;AAAEC,UAAAA,KAAF;AAASC,UAAAA,EAAE,EAAEb,cAAc,GAAGsB,GAAG,CAAC,CAAD,CAAN,GAAY;AAAvC,SAAD,CAAjC;;AACA,YAAItB,cAAJ,EAAoB;AAChB,cAAIyB,UAAU,CAACC,IAAf,EAAqB;AACjB,mBAAOpB,WAAW,GAAGmB,UAAH,GAAgBA,UAAU,CAACE,aAAX,EAAlC;AACH;;AACD,iBAAOC,OAAO,CAACC,MAAR,CAAe,qBAAe;AAAEjB,YAAAA;AAAF,WAAf,CAAf,CAAP;AACH;;AACD,cAAMkB,gBAAgB,GAAG,MAAML,UAAU,CAACM,YAAX,CAAwB;AAAET,UAAAA,GAAF;AAAOrB,UAAAA,IAAP;AAAaC,UAAAA,KAAb;AAAoBC,UAAAA,SAApB;AAA+BC,UAAAA,KAA/B;AAAsCC,UAAAA;AAAtC,SAAxB,CAA/B;;AACA,YAAIC,WAAJ,EAAiB;AACb,iBAAOwB,gBAAP;AACH;;AACD,eAAOA,gBAAgB,CAACE,GAAjB,CAAsBC,WAAD,IAAiBA,WAAW,CAACN,aAAZ,EAAtC,CAAP;AACH,OA7B+D,CA+BhE;;;AACA,YAAMF,UAAU,GAAG,MAAMd,QAAQ,CAACQ,OAAD,CAAjC;AACA,YAAMe,OAAO,GAAG,MAAMhB,WAAW,CAACiB,SAAZ,CAAsBV,UAAtB,EAAkCb,KAAlC,CAAtB;;AACA,UAAIsB,OAAJ,EAAa;AACT;AACA,cAAME,MAAM,GAAGf,WAAW,CAACG,MAAZ,KAAwBJ,KAAK,GAAG,CAA/C;;AACA,YAAIgB,MAAJ,EAAY;AACR,iBAAO9B,WAAW,GAAGmB,UAAH,GAAgBA,UAAU,CAACE,aAAX,EAAlC;AACH;;AACD,eAAOF,UAAP;AACH;;AACD,YAAM,qBAAoB;AACtBY,QAAAA,QAAQ,EAAEnB,WAAW,CAACoB,SADA;AAEtBC,QAAAA,MAAM,EAAErB,WAAW,CAACL,EAFE;AAGtB2B,QAAAA,OAAO,EAAE5B,KAHa;AAItB6B,QAAAA,KAAK,EAAEtB,OAAO,CAACN;AAJO,OAApB,CAAN;AAMH,KAhDD;;AAiDA,UAAM6B,IAAI,GAAG,MAAM5C,SAAS,CAAC6C,MAAV,CAAiB1B,OAAjB,EAA0B,IAA1B,CAAnB;;AACA,QAAIlB,UAAU,IAAIC,cAAlB,EAAkC;AAC9B,+BAAY0C,IAAZ;AACH;;AAED,WAAO;AAAEA,MAAAA,IAAF;AAAQhC,MAAAA;AAAR,KAAP;AAEH,GArED,CAsEA,OAAOkC,KAAP,EAAc;AACV,UAAM,oBAAkB;AAAEA,MAAAA;AAAF,KAAlB,CAAN;AACH;AACJ,CAhFD","sourcesContent":["import GlobalNotFound from '../../errors/global.not-found-error';\nimport RedisErrorHandler from '../../errors/redis.error-handler';\nimport RedisNotLinkedError from '../../errors/redis.not-linked-error';\n\nmodule.exports = async function ({ modelPath, isFindById, isSingleResult, skip, limit, direction, field, filter, returnModel = false }) {\n\n    //TODO: Needs refactoring, should handle a single function but is doing 3 different things\n\n    const { redis } = this.server.app;\n    let totalCount = 0;\n\n    try {\n        const findById = async ({ model, id }) => {\n\n            try {\n                const Model = await redis.factory(model, id);\n                return await Model;\n            }\n            catch (err) {\n                throw GlobalNotFound({ model, id });\n            }\n\n        };\n\n        const reducer = async (parentModel, current, index, sourceArray) => {\n            //the first one\n            if (!parentModel) {\n                // Load the model, wait for it to load and pass it\n                return await findById(current);\n            }\n            const { model, id } = current;\n            //wait for parent to load\n            parentModel = await parentModel;\n\n            // the last one in a find all or find a single model\n            if (!id) {\n\n                const ids = await parentModel.getAll(model, model);\n                totalCount = ids.length;\n\n                //if single result then only get the first one\n                const childModel = await findById({ model, id: isSingleResult ? ids[0] : null });\n                if (isSingleResult) {\n                    if (childModel.inDb) {\n                        return returnModel ? childModel : childModel.allProperties();\n                    }\n                    return Promise.reject(GlobalNotFound({ model }));\n                }\n                const allResultsModels = await childModel.findAllByIds({ ids, skip, limit, direction, field, filter });\n                if (returnModel) {\n                    return allResultsModels;\n                }\n                return allResultsModels.map((resultModel) => resultModel.allProperties());\n            }\n\n            //load child model\n            const childModel = await findById(current);\n            const belongs = await parentModel.belongsTo(childModel, model);\n            if (belongs) {\n                // the last one in a find by id else continue\n                const isLast = sourceArray.length === (index + 1);\n                if (isLast) {\n                    return returnModel ? childModel : childModel.allProperties();\n                }\n                return childModel;\n            }\n            throw RedisNotLinkedError({\n                mainType: parentModel.modelName,\n                mainId: parentModel.id,\n                subType: model,\n                subId: current.id\n            });\n        };\n        const data = await modelPath.reduce(reducer, null);\n        if (isFindById || isSingleResult) {\n            return { ...data };\n        }\n\n        return { data, totalCount };\n\n    }\n    catch (error) {\n        throw RedisErrorHandler({ error });\n    }\n};\n"],"file":"global.find-in-model-path.service.js"}