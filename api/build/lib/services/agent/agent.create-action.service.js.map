{"version":3,"sources":["../../../../server/lib/services/agent/agent.create-action.service.js"],"names":["module","exports","id","AgentModel","actionId","actionData","returnModel","server","services","globalService","actionService","agentService","findById","model","MODEL_AGENT","isUnique","isModelUnique","MODEL_ACTION","field","value","actionName","upsert","data","Promise","reject","message","error"],"mappings":";;AAAA;;AAIA;;AACA;;;;AAEAA,MAAM,CAACC,OAAP,GAAiB,gBACb;AACIC,EAAAA,EADJ;AAEIC,EAAAA,UAAU,GAAG,IAFjB;AAGIC,EAAAA,QAHJ;AAIIC,EAAAA,UAJJ;AAKIC,EAAAA,WAAW,GAAG;AALlB,CADa,EAQf;AAAA,eAEyD,MAAM,KAAKC,MAAL,CAAYC,QAAZ,EAF/D;AAAA,QAEUC,aAFV,QAEUA,aAFV;AAAA,QAEyBC,aAFzB,QAEyBA,aAFzB;AAAA,QAEwCC,YAFxC,QAEwCA,YAFxC;;AAIE,MAAI;AACAR,IAAAA,UAAU,GAAGA,UAAU,KAAI,MAAMM,aAAa,CAACG,QAAd,CAAuB;AAAEV,MAAAA,EAAF;AAAMW,MAAAA,KAAK,EAAEC,sBAAb;AAA0BR,MAAAA,WAAW,EAAE;AAAvC,KAAvB,CAAV,CAAvB;AACA,UAAMS,QAAQ,GAAG,MAAMJ,YAAY,CAACK,aAAb,CAA2B;AAC9Cb,MAAAA,UAD8C;AAE9CU,MAAAA,KAAK,EAAEI,uBAFuC;AAG9CC,MAAAA,KAAK,EAAE,YAHuC;AAI9CC,MAAAA,KAAK,EAAEd,UAAU,CAACe;AAJ4B,KAA3B,CAAvB;;AAMA,QAAIL,QAAJ,EAAc;AACV,aAAO,MAAML,aAAa,CAACW,MAAd,CAAqB;AAAEC,QAAAA,IAAI,EAAEjB,UAAR;AAAoBD,QAAAA,QAApB;AAA8BD,QAAAA,UAA9B;AAA0CG,QAAAA;AAA1C,OAArB,CAAb;AACH;;AACD,WAAOiB,OAAO,CAACC,MAAR,CAAe,qBAAmB;AACrCC,MAAAA,OAAO,EAAG,OAAMX,sBAAY,kBAAiBG,uBAAa,oBAAmBZ,UAAU,CAACe,UAAW;AAD9D,KAAnB,CAAf,CAAP;AAGH,GAdD,CAeA,OAAOM,KAAP,EAAc;AACV,UAAM,oBAAkB;AAAEA,MAAAA;AAAF,KAAlB,CAAN;AACH;AACJ,CA9BD","sourcesContent":["import {\n    MODEL_ACTION,\n    MODEL_AGENT\n} from '../../../util/constants';\nimport GlobalDefaultError from '../../errors/global.default-error';\nimport RedisErrorHandler from '../../errors/redis.error-handler';\n\nmodule.exports = async function (\n    {\n        id,\n        AgentModel = null,\n        actionId,\n        actionData,\n        returnModel = false\n    }\n) {\n\n    const { globalService, actionService, agentService } = await this.server.services();\n\n    try {\n        AgentModel = AgentModel || await globalService.findById({ id, model: MODEL_AGENT, returnModel: true });\n        const isUnique = await agentService.isModelUnique({\n            AgentModel,\n            model: MODEL_ACTION,\n            field: 'actionName',\n            value: actionData.actionName\n        });\n        if (isUnique) {\n            return await actionService.upsert({ data: actionData, actionId, AgentModel, returnModel });\n        }\n        return Promise.reject(GlobalDefaultError({\n            message: `The ${MODEL_AGENT} already has a ${MODEL_ACTION} with the name= \"${actionData.actionName}\".`\n        }));\n    }\n    catch (error) {\n        throw RedisErrorHandler({ error });\n    }\n};\n"],"file":"agent.create-action.service.js"}