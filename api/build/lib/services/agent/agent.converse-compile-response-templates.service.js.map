{"version":3,"sources":["../../../../server/lib/services/agent/agent.converse-compile-response-templates.service.js"],"names":["module","exports","responses","templateContext","isTextPrompt","handlebars","server","app","parsedResponses","_","map","response","textResponse","actions","match","numberOfSlots","length","compiledResponse","compile","strict","error","console","compact","filter","parsedResponse","maxNumberOfExpressions","max","Math","floor","random"],"mappings":";;AAAA;;;;AAEAA,MAAM,CAACC,OAAP,GAAiB,UAAU;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,eAAb;AAA8BC,EAAAA,YAAY,GAAG;AAA7C,CAAV,EAAgE;AAAA,QAErEC,UAFqE,GAEtD,KAAKC,MAAL,CAAYC,GAF0C,CAErEF,UAFqE;;AAI7E,MAAIG,eAAe,GAAGC,gBAAEC,GAAF,CAAMR,SAAN,EAAkBS,QAAD,IAAc;AAEjDA,IAAAA,QAAQ,GAAGP,YAAY,GAAG;AAAEQ,MAAAA,YAAY,EAAED,QAAhB;AAA0BE,MAAAA,OAAO,EAAE;AAAnC,KAAH,GAA6CF,QAApE;AACA,UAAMG,KAAK,GAAGH,QAAQ,CAACC,YAAT,CAAsBE,KAAtB,CAA4B,KAA5B,CAAd;AACA,UAAMC,aAAa,GAAGD,KAAK,GAAGA,KAAK,CAACE,MAAT,GAAkB,CAA7C;AACA,UAAMC,gBAAgB,GAAGZ,UAAU,CAACa,OAAX,CAAmBP,QAAQ,CAACC,YAA5B,EAA0C;AAAEO,MAAAA,MAAM,EAAE;AAAV,KAA1C,CAAzB;;AACA,QAAI;AACA,aAAO;AAAEP,QAAAA,YAAY,EAAEK,gBAAgB,CAACd,eAAD,CAAhC;AAAmDY,QAAAA,aAAnD;AAAkEF,QAAAA,OAAO,EAAEF,QAAQ,CAACE;AAApF,OAAP;AACH,KAFD,CAGA,OAAOO,KAAP,EAAc;AACVC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACA,aAAO,IAAP;AACH;AACJ,GAbqB,CAAtB;;AAeAZ,EAAAA,eAAe,GAAGC,gBAAEa,OAAF,CAAUd,eAAV,CAAlB;;AACA,MAAIA,eAAe,CAACQ,MAAhB,GAAyB,CAA7B,EAAgC;AAE5BR,IAAAA,eAAe,GAAGC,gBAAEc,MAAF,CAASf,eAAT,EAA2BgB,cAAD,IAAoB;AAE5D,aAAOA,cAAc,CAACZ,YAAf,KAAgC,EAAvC;AACH,KAHiB,CAAlB;AAIH;;AAED,MAAIJ,eAAe,CAACQ,MAAhB,GAAyB,CAA7B,EAAgC;AAE5B,UAAMS,sBAAsB,GAAGhB,gBAAEiB,GAAF,CAAMjB,gBAAEC,GAAF,CAAMF,eAAN,EAAuB,eAAvB,CAAN,CAA/B;;AACAA,IAAAA,eAAe,GAAGC,gBAAEc,MAAF,CAASf,eAAT,EAA2BgB,cAAD,IAAoB;AAE5D,aAAOA,cAAc,CAACT,aAAf,KAAiCU,sBAAxC;AACH,KAHiB,CAAlB;AAIH;;AAED,MAAIjB,eAAe,CAACQ,MAAhB,GAAyB,CAA7B,EAAgC;AAC5B,WAAOR,eAAe,CAACmB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBrB,eAAe,CAACQ,MAA3C,CAAD,CAAtB;AACH;;AACD,SAAO;AAAEJ,IAAAA,YAAY,EAAE,sCAAhB;AAAwDC,IAAAA,OAAO,EAAE;AAAjE,GAAP;AACH,CAzCD","sourcesContent":["import _ from 'lodash';\n\nmodule.exports = function ({ responses, templateContext, isTextPrompt = false }) {\n\n    const { handlebars } = this.server.app;\n\n    let parsedResponses = _.map(responses, (response) => {\n\n        response = isTextPrompt ? { textResponse: response, actions: [] } : response;\n        const match = response.textResponse.match(/{{/g);\n        const numberOfSlots = match ? match.length : 0;\n        const compiledResponse = handlebars.compile(response.textResponse, { strict: true });\n        try {\n            return { textResponse: compiledResponse(templateContext), numberOfSlots, actions: response.actions };\n        }\n        catch (error) {\n            console.error(error);\n            return null;\n        }\n    });\n\n    parsedResponses = _.compact(parsedResponses);\n    if (parsedResponses.length > 0) {\n\n        parsedResponses = _.filter(parsedResponses, (parsedResponse) => {\n\n            return parsedResponse.textResponse !== '';\n        });\n    }\n    \n    if (parsedResponses.length > 0) {\n\n        const maxNumberOfExpressions = _.max(_.map(parsedResponses, 'numberOfSlots'));\n        parsedResponses = _.filter(parsedResponses, (parsedResponse) => {\n\n            return parsedResponse.numberOfSlots === maxNumberOfExpressions;\n        });\n    }\n\n    if (parsedResponses.length > 0 ){\n        return parsedResponses[Math.floor(Math.random() * parsedResponses.length)];\n    }\n    return { textResponse: 'Sorry weâ€™re not sure how to respond.', actions: [] };\n};\n"],"file":"agent.converse-compile-response-templates.service.js"}