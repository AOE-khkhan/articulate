{"version":3,"sources":["../../../../server/lib/services/agent/agent.import.service.js"],"names":["module","exports","payload","server","services","agentService","actions","categories","keywords","settings","agentPostFormat","postFormat","agentWebhook","webhook","agent","keywordsDir","AgentModel","create","data","status","STATUS_OUT_OF_DATE","enableModelsPerCategory","_","defaultTo","multiCategory","extraTrainingData","isImport","returnModel","updateAllSettings","settingsData","usePostFormat","createPostFormat","postFormatData","useWebhook","createWebhook","webhookData","Promise","all","map","keyword","newKeyword","createKeyword","keywordData","keywordName","parseInt","id","category","sayings","categoryData","model","CategoryModel","createCategory","saying","forEach","tempKeyword","keywordId","upsertSayingInCategory","categoryId","sayingData","action","actionData","ActionModel","createAction","upsertPostFormatInAction","actionId","upsertWebhookInAction","export","error"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport { STATUS_OUT_OF_DATE } from '../../../util/constants';\nimport RedisErrorHandler from '../../errors/redis.error-handler';\n\nmodule.exports = async function ({ payload }) {\n\n    const { agentService } = await this.server.services();\n    const {\n        actions,\n        categories,\n        keywords,\n        settings,\n        postFormat: agentPostFormat,\n        webhook: agentWebhook,\n        ...agent\n    } = payload;\n    const keywordsDir = {};\n    try {\n        const AgentModel = await agentService.create({\n            data: {\n                ...agent,\n                ...{\n                    status: STATUS_OUT_OF_DATE,\n                    enableModelsPerCategory: _.defaultTo(agent.enableModelsPerCategory, true),\n                    multiCategory: _.defaultTo(agent.multiCategory, true),\n                    extraTrainingData: _.defaultTo(agent.extraTrainingData, true)\n                }\n            },\n            isImport: true,\n            returnModel: true\n        });\n\n        if (settings) {\n            await agentService.updateAllSettings({ AgentModel, settingsData: settings });\n        }\n\n        if (agent.usePostFormat) {\n            await agentService.createPostFormat({\n                AgentModel,\n                postFormatData: agentPostFormat\n            });\n        }\n\n        if (agent.useWebhook) {\n            await agentService.createWebhook({\n                AgentModel,\n                webhookData: agentWebhook\n            });\n        }\n\n        await Promise.all(keywords.map(async (keyword) => {\n\n            const newKeyword = await agentService.createKeyword({\n                AgentModel,\n                keywordData: keyword\n            });\n            keywordsDir[newKeyword.keywordName] = parseInt(newKeyword.id);\n        }));\n\n        await Promise.all(categories.map(async (category) => {\n\n            const { sayings, ...categoryData } = category;\n            if (categoryData.model){\n                delete categoryData.model;\n            }\n            const CategoryModel = await agentService.createCategory({\n                AgentModel,\n                categoryData,\n                returnModel: true\n            });\n            return await Promise.all(sayings.map(async (saying) => {\n\n                saying.keywords.forEach((tempKeyword) => {\n\n                    tempKeyword.keywordId = keywordsDir[tempKeyword.keyword];\n                });\n                return await agentService.upsertSayingInCategory({\n                    id: AgentModel.id,\n                    categoryId: CategoryModel.id,\n                    sayingData: saying\n                });\n            }));\n        }));\n        await Promise.all(actions.map(async (action) => {\n\n            const { postFormat, webhook, ...actionData } = action;\n            const ActionModel = await agentService.createAction({\n                AgentModel,\n                actionData\n            });\n\n            if (action.usePostFormat) {\n                await agentService.upsertPostFormatInAction({\n                    id: AgentModel.id,\n                    actionId: ActionModel.id,\n                    postFormatData: postFormat\n                });\n            }\n\n            if (action.useWebhook) {\n                await agentService.upsertWebhookInAction({\n                    id: AgentModel.id,\n                    actionId: ActionModel.id,\n                    data: webhook\n                });\n            }\n        }));\n        return await agentService.export({ id: AgentModel.id });\n    }\n    catch (error) {\n        throw RedisErrorHandler({ error });\n    }\n};\n"],"file":"agent.import.service.js"}