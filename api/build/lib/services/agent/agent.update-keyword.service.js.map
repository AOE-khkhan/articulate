{"version":3,"sources":["../../../../server/lib/services/agent/agent.update-keyword.service.js"],"names":["module","exports","id","keywordId","keywordData","returnModel","server","services","globalService","modelPath","MODEL_AGENT","MODEL_KEYWORD","modelPathIds","models","getAllModelsInPath","ids","AgentModel","KeywordModel","updateInstance","data","property","STATUS_OUT_OF_DATE","saveInstance","keywordCategoryIds","getAll","MODEL_CATEGORY","KeywordCategoryModels","loadAllByIds","model","categoryStatusUpdatePromise","map","CategoryModel","Promise","all","allProperties","error"],"mappings":";;AAAA;;AACA;;AAMA;;;;AAEAA,MAAM,CAACC,OAAP,GAAiB,gBAAgB;AAAEC,EAAAA,EAAF;AAAMC,EAAAA,SAAN;AAAiBC,EAAAA,WAAjB;AAA8BC,EAAAA,WAAW,GAAG;AAA5C,CAAhB,EAAqE;AAAA,eAExD,MAAM,KAAKC,MAAL,CAAYC,QAAZ,EAFkD;AAAA,QAE1EC,aAF0E,QAE1EA,aAF0E;;AAGlF,MAAI;AACA,UAAMC,SAAS,GAAG,CAACC,sBAAD,EAAcC,wBAAd,CAAlB;AACA,UAAMC,YAAY,GAAG,CAACV,EAAD,EAAKC,SAAL,CAArB,CAFA,CAIA;;AACA,UAAMU,MAAM,GAAG,MAAML,aAAa,CAACM,kBAAd,CAAiC;AAAEL,MAAAA,SAAF;AAAaM,MAAAA,GAAG,EAAEH,YAAlB;AAAgCP,MAAAA,WAAW,EAAE;AAA7C,KAAjC,CAArB;AACA,UAAMW,UAAU,GAAGH,MAAM,CAACH,sBAAD,CAAzB;AACA,UAAMO,YAAY,GAAGJ,MAAM,CAACF,wBAAD,CAA3B;AACA,UAAMM,YAAY,CAACC,cAAb,CAA4B;AAAEC,MAAAA,IAAI,EAAEf;AAAR,KAA5B,CAAN,CARA,CAUA;AACA;;AACAY,IAAAA,UAAU,CAACI,QAAX,CAAoB,QAApB,EAA8BC,6BAA9B;AACA,UAAML,UAAU,CAACM,YAAX,EAAN;AAEA,UAAMC,kBAAkB,GAAG,MAAMN,YAAY,CAACO,MAAb,CAAoBC,yBAApB,EAAoCA,yBAApC,CAAjC;AACA,UAAMC,qBAAqB,GAAG,MAAMlB,aAAa,CAACmB,YAAd,CAA2B;AAC3DZ,MAAAA,GAAG,EAAEQ,kBADsD;AAClC;AACzBK,MAAAA,KAAK,EAAEH,yBAFoD;AAG3DpB,MAAAA,WAAW,EAAE;AAH8C,KAA3B,CAApC;AAMA,UAAMwB,2BAA2B,GAAGH,qBAAqB,CAACI,GAAtB,CAA0B,MAAOC,aAAP,IAAyB;AAEnFA,MAAAA,aAAa,CAACX,QAAd,CAAuB,QAAvB,EAAiCC,6BAAjC;AACA,aAAO,MAAMU,aAAa,CAACT,YAAd,EAAb;AACH,KAJmC,CAApC;AAKA,UAAMU,OAAO,CAACC,GAAR,CAAYJ,2BAAZ,CAAN;AAEA,WAAOxB,WAAW,GAAGY,YAAH,GAAkBA,YAAY,CAACiB,aAAb,EAApC;AAEH,GA/BD,CAgCA,OAAOC,KAAP,EAAc;AACV,UAAM,oBAAkB;AAAEA,MAAAA;AAAF,KAAlB,CAAN;AACH;AACJ,CAtCD","sourcesContent":["import _ from 'lodash';\nimport {\n    MODEL_AGENT,\n    MODEL_CATEGORY,\n    MODEL_KEYWORD,\n    STATUS_OUT_OF_DATE\n} from '../../../util/constants';\nimport RedisErrorHandler from '../../errors/redis.error-handler';\n\nmodule.exports = async function ({ id, keywordId, keywordData, returnModel = false }) {\n\n    const { globalService } = await this.server.services();\n    try {\n        const modelPath = [MODEL_AGENT, MODEL_KEYWORD];\n        const modelPathIds = [id, keywordId];\n\n        // Load Used Models\n        const models = await globalService.getAllModelsInPath({ modelPath, ids: modelPathIds, returnModel: true });\n        const AgentModel = models[MODEL_AGENT];\n        const KeywordModel = models[MODEL_KEYWORD];\n        await KeywordModel.updateInstance({ data: keywordData });\n\n        // Update Agent and related categories status\n        // TODO: Publish Agent update\n        AgentModel.property('status', STATUS_OUT_OF_DATE);\n        await AgentModel.saveInstance();\n\n        const keywordCategoryIds = await KeywordModel.getAll(MODEL_CATEGORY, MODEL_CATEGORY);\n        const KeywordCategoryModels = await globalService.loadAllByIds({\n            ids: keywordCategoryIds, //Only load the keywords we are going to use\n            model: MODEL_CATEGORY,\n            returnModel: true\n        });\n\n        const categoryStatusUpdatePromise = KeywordCategoryModels.map(async (CategoryModel) => {\n\n            CategoryModel.property('status', STATUS_OUT_OF_DATE);\n            return await CategoryModel.saveInstance();\n        });\n        await Promise.all(categoryStatusUpdatePromise);\n\n        return returnModel ? KeywordModel : KeywordModel.allProperties();\n\n    }\n    catch (error) {\n        throw RedisErrorHandler({ error });\n    }\n};\n"],"file":"agent.update-keyword.service.js"}