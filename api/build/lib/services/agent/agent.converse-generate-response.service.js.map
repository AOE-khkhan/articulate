{"version":3,"sources":["../../../../server/lib/services/agent/agent.converse-generate-response.service.js"],"names":["module","exports","conversationStateObject","server","services","agentService","keywordService","globalService","agent","action","context","currentFrame","rasaResult","text","modifier","lastFrame","frames","length","slots","requiredSlots","_","filter","slot","slotName","isRequired","isListActionSlotName","map","isList","recognizedKeywords","keywords","overridedSlots","actionSlot","keyword","slotToModify","valueSource","recognizedKeywordsOfSameTypeThanModifierKeyword","recognizedKeyword","recognizedModifierKeywordsValues","parseSysValue","Array","isArray","value","forEach","keywordValue","push","original","remainingLife","keywordsRasaValues","keywordsOriginalValues","indexOf","staticValue","savedSlots","converseFulfillEmptySlotsWithSavedValues","missingKeywords","response","converseCompileResponseTemplates","responses","textPrompts","templateContext","isTextPrompt","recognizedKeywordsNames","slotToFill","extractor","CONFIG_KEYWORD_TYPE_REGEX","allRecognizedKeywordsForRegex","ent","sort","a","b","end","useWebhook","modelPath","webhook","model","MODEL_AGENT","id","MODEL_ACTION","MODEL_WEBHOOK","findInModelPath","isFindById","isSingleResult","skip","limit","direction","field","webhookResponse","converseCallWebhook","url","webhookUrl","templatePayload","webhookPayload","payloadType","webhookPayloadType","method","webhookVerb","headers","webhookHeaders","username","webhookUser","undefined","password","webhookPassword","textResponse","actions","actionWasFulfilled"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport { CONFIG_KEYWORD_TYPE_REGEX, MODEL_AGENT, MODEL_ACTION, MODEL_WEBHOOK } from '../../../util/constants';\n\nmodule.exports = async function ({ conversationStateObject }) {\n\n    const { agentService, keywordService, globalService } = await this.server.services();\n    //TODO: need to refactor the CSO creation since is no longer passed to other functions\n    //const conversationStateObject = { agent, action, context, currentFrame, rasaResult, text };\n    const { agent, action, context, currentFrame, rasaResult, text, modifier } = conversationStateObject;\n    //TODO: remove context update, and move it somewhere else\n    const lastFrame = context.frames[context.frames.length - 1];\n    if (action.slots && action.slots.length > 0) {\n        const requiredSlots = _.filter(action.slots, (slot) => {\n\n            lastFrame.slots[slot.slotName] = currentFrame.slots[slot.slotName] ? currentFrame.slots[slot.slotName] : '';\n            return slot.isRequired;\n        });\n        const isListActionSlotName = _.map(_.filter(action.slots, (slot) => {\n\n            return slot.isList;\n        }), 'slotName');\n        //Create an array of slots that existed before and are being overrided because of a new text parse\n        const recognizedKeywords = rasaResult.keywords;\n        const overridedSlots = [];\n        if (modifier){\n            const actionSlot = _.filter(action.slots, (slot) => {\n\n                return slot.keyword === modifier.keyword;\n            })[0];\n            const slotToModify = actionSlot.slotName;\n            if (modifier.valueSource === 'keyword'){\n                const recognizedKeywordsOfSameTypeThanModifierKeyword = _.filter(recognizedKeywords, (recognizedKeyword) => {\n\n                    return recognizedKeyword.keyword === modifier.keyword;\n                });\n                const recognizedModifierKeywordsValues = _.map(recognizedKeywordsOfSameTypeThanModifierKeyword, (recognizedKeyword) => {\n\n                    return keywordService.parseSysValue({ keyword: recognizedKeyword, text });\n                });\n                switch (modifier.action) {\n                    case 'ADD':\n                        if (Array.isArray(lastFrame.slots[slotToModify].value)){\n                            recognizedModifierKeywordsValues.forEach((keywordValue) => {\n\n                                lastFrame.slots[slotToModify].value.push(keywordValue.value);\n                                lastFrame.slots[slotToModify].original.push(keywordValue.original);\n                                lastFrame.slots[slotToModify].remainingLife = actionSlot.remainingLife;\n                            });\n                        }\n                        else {\n                            lastFrame.slots[slotToModify] = {\n                                keyword: modifier.keyword,\n                                value: lastFrame.slots[slotToModify].value ? [lastFrame.slots[slotToModify].value] : [],\n                                original: lastFrame.slots[slotToModify].original ? [lastFrame.slots[slotToModify].original] : [],\n                                remainingLife: actionSlot.remainingLife\n                            };\n                            //Push the new recognized values to the list\n                            recognizedModifierKeywordsValues.forEach((keywordValue) => {\n\n                                lastFrame.slots[slotToModify].value.push(keywordValue.value);\n                                lastFrame.slots[slotToModify].original.push(keywordValue.original);\n                                lastFrame.slots[slotToModify].remainingLife = actionSlot.remainingLife;\n                            });\n                        }\n                        break;\n                    case 'REMOVE':\n                        const keywordsRasaValues = _.map(recognizedModifierKeywordsValues, 'value');\n                        const keywordsOriginalValues = _.map(recognizedModifierKeywordsValues, 'original');\n                        if (Array.isArray(lastFrame.slots[slotToModify].value)){\n                            lastFrame.slots[slotToModify].value = _.filter(lastFrame.slots[slotToModify].value, (value) => {\n\n                                return keywordsRasaValues.indexOf(value) === -1;\n                            });\n                            lastFrame.slots[slotToModify].original = _.filter(lastFrame.slots[slotToModify].original, (original) => {\n\n                                return keywordsOriginalValues.indexOf(original) === -1;\n                            });\n                            if (lastFrame.slots[slotToModify].value.length === 0){\n                                lastFrame.slots[slotToModify] = ''\n                            }\n                            lastFrame.slots[slotToModify].remainingLife = actionSlot.remainingLife;\n                        }\n                        else {\n                            if (keywordsRasaValues.indexOf(lastFrame.slots[slotToModify].value) || keywordsOriginalValues.indexOf(lastFrame.slots[slotToModify].original)){\n                                lastFrame.slots[slotToModify] = '';\n                            }\n                        }\n                        break;\n                    case 'SET':\n                        if (Array.isArray(lastFrame.slots[slotToModify].value) || recognizedModifierKeywordsValues.length > 1){\n                            lastFrame.slots[slotToModify] = {\n                                keyword: modifier.keyword,\n                                value: [],\n                                original: [],\n                                remainingLife: actionSlot.remainingLife\n                            };\n                            recognizedModifierKeywordsValues.forEach((keywordValue) => {\n\n                                lastFrame.slots[slotToModify].value.push(keywordValue.value);\n                                lastFrame.slots[slotToModify].original.push(keywordValue.original);\n                            });\n                        }\n                        else {\n                            if (recognizedModifierKeywordsValues.length > 0){\n                                lastFrame.slots[slotToModify] = {\n                                    keyword: modifier.keyword,\n                                    value: recognizedModifierKeywordsValues[0].value,\n                                    original: recognizedModifierKeywordsValues[0].original,\n                                    remainingLife: actionSlot.remainingLife\n                                };\n                            }\n                        }\n                        break;\n                    case 'UNSET':\n                        lastFrame.slots[slotToModify] = '';\n                        break;\n                    default:\n                        break;\n                }\n            }\n            else {\n                switch (modifier.action) {\n                    case 'ADD':\n                        if (Array.isArray(lastFrame.slots[slotToModify].value)){\n                            lastFrame.slots[slotToModify].value.push(modifier.staticValue);\n                            lastFrame.slots[slotToModify].original.push(modifier.staticValue);\n                        }\n                        else {\n                            lastFrame.slots[slotToModify] = {\n                                keyword: modifier.keyword,\n                                value: lastFrame.slots[slotToModify].value ? [lastFrame.slots[slotToModify].value] : [],\n                                original: lastFrame.slots[slotToModify].original ? [lastFrame.slots[slotToModify].original] : []\n                            };\n                            //Push the new recognized values to the list\n                            lastFrame.slots[slotToModify].value.push(modifier.staticValue);\n                            lastFrame.slots[slotToModify].original.push(modifier.staticValue);\n                        }\n                        break;\n                    case 'REMOVE':\n                        if (Array.isArray(lastFrame.slots[slotToModify].value)){\n                            lastFrame.slots[slotToModify].value = _.filter(lastFrame.slots[slotToModify].value, (value) => {\n\n                                return value !== modifier.staticValue;\n                            });\n                            lastFrame.slots[slotToModify].original = _.filter(lastFrame.slots[slotToModify].original, (original) => {\n\n                                return original !== modifier.staticValue;\n                            });\n                            if (lastFrame.slots[slotToModify].value.length === 0){\n                                lastFrame.slots[slotToModify] = ''\n                            }\n                        }\n                        else {\n                            if (lastFrame.slots[slotToModify].value === modifier.staticValue || lastFrame.slots[slotToModify].original === modifier.staticValue){\n                                lastFrame.slots[slotToModify] = '';\n                            }\n                        }\n                        break;\n                    case 'SET':\n                        if (Array.isArray(lastFrame.slots[slotToModify].value)){\n                            lastFrame.slots[slotToModify] = {\n                                keyword: modifier.keyword,\n                                value: [],\n                                original: []\n                            };\n                            lastFrame.slots[slotToModify].value.push(modifier.staticValue);\n                            lastFrame.slots[slotToModify].original.push(modifier.staticValue);\n                        }\n                        else {\n                            lastFrame.slots[slotToModify] = {\n                                keyword: modifier.keyword,\n                                value: modifier.staticValue,\n                                original: modifier.staticValue\n                            };\n                        }\n                        break;\n                    case 'UNSET':\n                        lastFrame.slots[slotToModify] = '';\n                        break;\n                    default:\n                        break;\n                }\n            }\n            if (lastFrame.slots[slotToModify].remainingLife > -1){\n                conversationStateObject.context.savedSlots[slotToModify] = lastFrame.slots[slotToModify];\n            }\n            agentService.converseFulfillEmptySlotsWithSavedValues({ conversationStateObject });\n            const missingKeywords = _.filter(requiredSlots, (slot) => {\n\n                if (currentFrame.slots[slot.slotName] && Array.isArray(currentFrame.slots[slot.slotName])){\n                    return currentFrame.slots[slot.slotName].length === 0;\n                }\n                return !currentFrame.slots[slot.slotName];\n            });\n            conversationStateObject.slots = currentFrame.slots;\n            if (missingKeywords.length > 0) {\n                const response = await agentService.converseCompileResponseTemplates({ responses: missingKeywords[0].textPrompts, templateContext: conversationStateObject, isTextPrompt: true });\n                return response;\n            }\n        }\n        else {\n            const recognizedKeywordsNames = _.map(recognizedKeywords, (recognizedKeyword) => {\n                //If the name of the recognized keyword match with an keyword name of an slot\n                const slotToFill = _.filter(action.slots, (slot) => { return slot.keyword === recognizedKeyword.keyword })[0];\n                if (slotToFill) {\n                    //Get the slot object\n                    //Get the slot name of the keyword that was recognized using the index of the array of keywords names\n                    const slotName = slotToFill.slotName;\n                    //If the slot is a list of elemnts\n                    if (isListActionSlotName.indexOf(slotName) > -1) {\n                        //If there isn't a value for this slot name in the context\n                        if (!lastFrame.slots[slotName] || lastFrame.slots[slotName] === '') {\n                            //Get the original and parsed value of the keyword\n                            const keywordValue = keywordService.parseSysValue({ keyword: recognizedKeyword, text });\n                            //Add these values to the context as a new slot\n                            lastFrame.slots[slotName] = {\n                                keyword: recognizedKeyword.keyword,\n                                value: keywordValue.value,\n                                original: keywordValue.original,\n                                remainingLife: slotToFill.remainingLife\n                            };\n                        }\n                        //If an slot in the context already exists for the recognized slot\n                        else {\n                            //If the value of the slot in the context is an array (This means that if the slot is a list)\n                            if (Array.isArray(lastFrame.slots[slotName].value)) {\n                                //If the slot haven't been overrided\n                                if (overridedSlots.indexOf(slotName) === -1) {\n                                    //Add the slot name to the list of overrided slots\n                                    overridedSlots.push(slotName);\n                                    //And clear the context of this slot\n                                    lastFrame.slots[slotName] = {\n                                        keyword: recognizedKeyword.keyword,\n                                        value: [],\n                                        original: [],\n                                        remainingLife: slotToFill.remainingLife\n                                    };\n                                }\n                                //Get the original and parsed value of the keyword\n                                const keywordValue = keywordService.parseSysValue({ keyword: recognizedKeyword, text });\n                                //Push the recognized values to the current context slot value and original attribute\n                                lastFrame.slots[slotName].value.push(keywordValue.value);\n                                lastFrame.slots[slotName].original.push(keywordValue.original);\n                            }\n                            //If the slot ias a list, and it exists in the context but it wasn't an array\n                            else {\n                                //Get the original and parsed value of the keyword\n                                const keywordValue = keywordService.parseSysValue({ keyword: recognizedKeyword, text });\n                                //Transform the current slot in the context to an array and insert the existent values in this array\n                                lastFrame.slots[slotName] = {\n                                    keyword: recognizedKeyword.keyword,\n                                    value: [lastFrame.slots[slotName].value],\n                                    original: [lastFrame.slots[slotName].original],\n                                    remainingLife: slotToFill.remainingLife\n                                };\n                                //Push the new recognized values to the list\n                                lastFrame.slots[slotName].value.push(keywordValue.value);\n                                lastFrame.slots[slotName].original.push(keywordValue.original);\n                                overridedSlots.push(slotName);\n                            }\n                        }\n                    }\n                    //If slot is not a list\n                    else {\n                        //Just insert an object with attributes value and original into the context slot after sorting the matching regex to keep the last one\n                        if (recognizedKeyword.extractor === CONFIG_KEYWORD_TYPE_REGEX) {\n                            const allRecognizedKeywordsForRegex = recognizedKeywords.filter((ent) => {\n\n                                return ent.keyword === recognizedKeyword.keyword && ent.extractor === CONFIG_KEYWORD_TYPE_REGEX;\n\n                            });\n                            allRecognizedKeywordsForRegex.sort((a, b) => {\n\n                                return b.end - a.end;\n                            });\n\n                            lastFrame.slots[slotName] = keywordService.parseSysValue({ keyword: allRecognizedKeywordsForRegex[0], text });\n                            lastFrame.slots[slotName].remainingLife = slotToFill.remainingLife;\n                        }\n                        else {\n                            lastFrame.slots[slotName] = keywordService.parseSysValue({ keyword: recognizedKeyword, text });\n                            lastFrame.slots[slotName].remainingLife = slotToFill.remainingLife;\n\n                        }\n\n                    }\n                    if (lastFrame.slots[slotName].remainingLife > -1){\n                        conversationStateObject.context.savedSlots[slotName] = lastFrame.slots[slotName];\n                    }\n                }\n                //Finally return the name of the recognized keyword for further checks\n                return recognizedKeyword.keyword;\n            });\n            agentService.converseFulfillEmptySlotsWithSavedValues({ conversationStateObject });\n            const missingKeywords = _.filter(requiredSlots, (slot) => {\n\n                return recognizedKeywordsNames.indexOf(slot.keyword) === -1 && !currentFrame.slots[slot.slotName];\n            });\n            conversationStateObject.slots = currentFrame.slots;\n            if (missingKeywords.length > 0) {\n                const response = await agentService.converseCompileResponseTemplates({ responses: missingKeywords[0].textPrompts, templateContext: conversationStateObject, isTextPrompt: true });\n                return response;\n            }\n        }\n    }\n    if (action.useWebhook || agent.useWebhook) {\n        let modelPath, webhook;\n        if (action.useWebhook){\n            modelPath = [\n                {\n                    model: MODEL_AGENT,\n                    id: agent.id\n                },\n                {\n                    model: MODEL_ACTION,\n                    id: action.id\n                },\n                {\n                    model: MODEL_WEBHOOK\n                }\n            ];\n            webhook = await globalService.findInModelPath({ modelPath, isFindById: false, isSingleResult: true });\n        }\n        else {\n            modelPath = [\n                {\n                    model: MODEL_AGENT,\n                    id: agent.id\n                },\n                {\n                    model: MODEL_WEBHOOK\n                }\n            ];\n            webhook = await globalService.findInModelPath({ modelPath, isFindById, isSingleResult, skip, limit, direction, field });\n        }\n        const webhookResponse = await agentService.converseCallWebhook({\n            url: webhook.webhookUrl,\n            templatePayload: webhook.webhookPayload,\n            payloadType: webhook.webhookPayloadType,\n            method: webhook.webhookVerb,\n            headers: webhook.webhookHeaders,\n            username: webhook.webhookUser ? webhook.webhookUser : undefined,\n            password: webhook.webhookPassword ? webhook.webhookPassword : undefined,\n            templateContext: conversationStateObject\n        });\n        if (webhookResponse.textResponse) {\n            return { slots: conversationStateObject.slots, textResponse: webhookResponse.textResponse, actions: webhookResponse.actions ? webhookResponse.actions : [], actionWasFulfilled: true, webhookResponse };\n        }\n        conversationStateObject.webhookResponse = { ...webhookResponse };\n        const response = await agentService.converseCompileResponseTemplates({ responses: conversationStateObject.action.responses, templateContext: conversationStateObject });\n        return { slots: conversationStateObject.slots, ...response, webhookResponse, actionWasFulfilled: true };\n    }\n    const response = await agentService.converseCompileResponseTemplates({ responses: conversationStateObject.action.responses, templateContext: conversationStateObject });\n    return { slots: conversationStateObject.slots, ...response, actionWasFulfilled: true };\n};\n"],"file":"agent.converse-generate-response.service.js"}