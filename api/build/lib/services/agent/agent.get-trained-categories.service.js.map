{"version":3,"sources":["../../../../server/lib/services/agent/agent.get-trained-categories.service.js"],"names":["module","exports","id","AgentModel","redis","server","app","services","globalService","getFirstSayingName","CategoryModel","categorySayingsIds","getAll","MODEL_SAYING","firstCategorySayingId","firstCategorySaying","findById","model","actions","join","RASA_INTENT_SPLIT_SYMBOL","formattedCategories","factory","MODEL_AGENT","agent","allProperties","enableModelsPerCategory","lastTraining","Promise","reject","message","justER","indexOf","RASA_MODEL_JUST_ER","firstAgentCategoryId","MODEL_CATEGORY","FirstAgentCategoryModel","returnModel","push","name","saying","CategoryModels","loadAllLinked","parentModel","length","missingCategories","TrainedCategoryModels","filter","property","missingTrainedCategories","all","map","category","categoryName","_","flatten","categoryRecognizer","agentName","RASA_MODEL_CATEGORY_RECOGNIZER","modifiersRecognizer","modifiersRecognizerJustER","RASA_MODEL_MODIFIERS","error"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport {\n    MODEL_AGENT,\n    MODEL_CATEGORY,\n    MODEL_SAYING,\n    RASA_INTENT_SPLIT_SYMBOL,\n    RASA_MODEL_CATEGORY_RECOGNIZER,\n    RASA_MODEL_JUST_ER,\n    RASA_MODEL_MODIFIERS\n} from '../../../util/constants';\nimport GlobalParseError from '../../errors/global.parse-error';\nimport RedisErrorHandler from '../../errors/redis.error-handler';\n\nmodule.exports = async function ({ id = null, AgentModel = null }) {\n\n    const { redis } = this.server.app;\n    const { globalService } = await this.server.services();\n\n    const getFirstSayingName = async ({ CategoryModel }) => {\n\n        const categorySayingsIds = await CategoryModel.getAll(MODEL_SAYING, MODEL_SAYING);\n        const firstCategorySayingId = categorySayingsIds[0];\n        const firstCategorySaying = await globalService.findById({ id: firstCategorySayingId, model: MODEL_SAYING });\n        return firstCategorySaying.actions.join(RASA_INTENT_SPLIT_SYMBOL);\n    };\n\n    let formattedCategories = [];\n    try {\n        AgentModel = AgentModel || await redis.factory(MODEL_AGENT, id);\n        const agent = AgentModel.allProperties();\n\n        if (!agent.enableModelsPerCategory) {\n            if (!agent.lastTraining) {\n                return Promise.reject(GlobalParseError({\n                    message: `The Agent id=[${agent.id}] is not trained`\n                }));\n            }\n            const justER = agent.model.indexOf(RASA_MODEL_JUST_ER) !== -1;\n\n            if (justER) {\n                //Given that the agent only have one saying and is the model is just an ER, then we need the saying name\n                const firstAgentCategoryId = await AgentModel.getAll(MODEL_CATEGORY, MODEL_CATEGORY);\n                const FirstAgentCategoryModel = await globalService.findById({ id: firstAgentCategoryId, model: MODEL_CATEGORY, returnModel: true });\n                formattedCategories.push({ name: 'default', model: agent.model, justER, saying: await getFirstSayingName({ CategoryModel: FirstAgentCategoryModel }) });\n            }\n            else {\n                formattedCategories.push({ name: 'default', model: agent.model, justER });\n            }\n        }\n\n        else {\n            const CategoryModels = await globalService.loadAllLinked({ parentModel: AgentModel, model: MODEL_CATEGORY, returnModel: true });\n            if (CategoryModels.length === 0) {\n                return Promise.reject(GlobalParseError({\n                    message: `The Agent id=[${agent.id}] doesn't have any categories.`,\n                    missingCategories: true\n                }));\n            }\n            const TrainedCategoryModels = CategoryModels.filter((CategoryModel) => CategoryModel.property('model'));\n\n            if (TrainedCategoryModels.length === 0) {\n                return Promise.reject(GlobalParseError({\n                    message: `The Agent id=[${agent.id}] doesn't have any trained categories.`,\n                    missingTrainedCategories: true\n                }));\n            }\n\n            formattedCategories = await Promise.all(TrainedCategoryModels.map(async (CategoryModel) => {\n\n                const category = CategoryModel.allProperties();\n                const justER = category.model.indexOf(RASA_MODEL_JUST_ER) !== -1;\n                if (justER) {\n                    return [{ name: category.categoryName, model: category.model, justER, saying: await getFirstSayingName({ CategoryModel }) }];\n                }\n                return { name: category.categoryName, model: category.model, justER };\n            }));\n\n            formattedCategories = _.flatten(formattedCategories);\n        }\n\n        if (agent.categoryRecognizer) {\n            const name = agent.agentName + RASA_MODEL_CATEGORY_RECOGNIZER;\n            formattedCategories.push({ name, model: name });\n        }\n\n        if (agent.modifiersRecognizer) {\n            if (agent.modifiersRecognizerJustER) {\n                formattedCategories.push({\n                    name: `${agent.agentName}_${RASA_MODEL_MODIFIERS}`,\n                    model: `${agent.agentName}_${agent.modifiersRecognizerJustER ? `${RASA_MODEL_JUST_ER}` : ''}${RASA_MODEL_MODIFIERS}`,\n                    justER: true,\n                    saying: agent.modifiersRecognizerJustER\n                });\n            }\n            else {\n                formattedCategories.push({\n                    name: `${agent.agentName}_${RASA_MODEL_MODIFIERS}`,\n                    model: `${agent.agentName}_${RASA_MODEL_MODIFIERS}`\n                });\n            }\n        }\n        return formattedCategories;\n    }\n    catch (error) {\n        throw RedisErrorHandler({ error });\n    }\n};\n"],"file":"agent.get-trained-categories.service.js"}