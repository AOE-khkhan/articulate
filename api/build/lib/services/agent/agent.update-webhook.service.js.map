{"version":3,"sources":["../../../../server/lib/services/agent/agent.update-webhook.service.js"],"names":["module","exports","id","webhookData","returnModel","server","services","globalService","AgentModel","findById","model","MODEL_AGENT","ids","getAll","MODEL_WEBHOOK","WebhookModel","inDb","updateInstance","data","allProperties","Promise","reject","error"],"mappings":";;AAAA;;AAIA;;AACA;;;;AAEAA,MAAM,CAACC,OAAP,GAAiB,gBAAgB;AAAEC,EAAAA,EAAF;AAAMC,EAAAA,WAAN;AAAmBC,EAAAA,WAAW,GAAG;AAAjC,CAAhB,EAA0D;AAAA,eAE7C,MAAM,KAAKC,MAAL,CAAYC,QAAZ,EAFuC;AAAA,QAE/DC,aAF+D,QAE/DA,aAF+D;;AAGvE,MAAI;AAEA,UAAMC,UAAU,GAAG,MAAMD,aAAa,CAACE,QAAd,CAAuB;AAAEP,MAAAA,EAAF;AAAMQ,MAAAA,KAAK,EAAEC,sBAAb;AAA0BP,MAAAA,WAAW,EAAE;AAAvC,KAAvB,CAAzB;AACA,UAAMQ,GAAG,GAAG,MAAMJ,UAAU,CAACK,MAAX,CAAkBC,wBAAlB,EAAiCA,wBAAjC,CAAlB;AACA,UAAMC,YAAY,GAAG,MAAMR,aAAa,CAACE,QAAd,CAAuB;AAAEP,MAAAA,EAAE,EAAEU,GAAG,CAAC,CAAD,CAAT;AAAcF,MAAAA,KAAK,EAAEI,wBAArB;AAAoCV,MAAAA,WAAW,EAAE;AAAjD,KAAvB,CAA3B;;AACA,QAAIW,YAAY,CAACC,IAAjB,EAAuB;AACnB,YAAMD,YAAY,CAACE,cAAb,CAA4B;AAAEC,QAAAA,IAAI,EAAEf;AAAR,OAA5B,CAAN;AACA,aAAOC,WAAW,GAAGW,YAAH,GAAkBA,YAAY,CAACI,aAAb,EAApC;AACH;;AACD,WAAOC,OAAO,CAACC,MAAR,CAAe,qBAAc;AAAEX,MAAAA,KAAK,EAAEI;AAAT,KAAd,CAAf,CAAP;AACH,GAVD,CAWA,OAAOQ,KAAP,EAAc;AACV,UAAM,oBAAkB;AAAEA,MAAAA;AAAF,KAAlB,CAAN;AACH;AACJ,CAjBD","sourcesContent":["import {\n    MODEL_AGENT,\n    MODEL_WEBHOOK\n} from '../../../util/constants';\nimport NotFoundError from '../../errors/global.not-found-error';\nimport RedisErrorHandler from '../../errors/redis.error-handler';\n\nmodule.exports = async function ({ id, webhookData, returnModel = false }) {\n\n    const { globalService } = await this.server.services();\n    try {\n\n        const AgentModel = await globalService.findById({ id, model: MODEL_AGENT, returnModel: true });\n        const ids = await AgentModel.getAll(MODEL_WEBHOOK, MODEL_WEBHOOK);\n        const WebhookModel = await globalService.findById({ id: ids[0], model: MODEL_WEBHOOK, returnModel: true });\n        if (WebhookModel.inDb) {\n            await WebhookModel.updateInstance({ data: webhookData });\n            return returnModel ? WebhookModel : WebhookModel.allProperties();\n        }\n        return Promise.reject(NotFoundError({ model: MODEL_WEBHOOK }));\n    }\n    catch (error) {\n        throw RedisErrorHandler({ error });\n    }\n};\n"],"file":"agent.update-webhook.service.js"}