{"version":3,"sources":["../../../../server/lib/services/agent/agent.update-post-format.service.js"],"names":["module","exports","id","postFormatData","returnModel","server","services","globalService","AgentModel","findById","model","MODEL_AGENT","ids","getAll","MODEL_POST_FORMAT","PostFormatModel","inDb","updateInstance","data","allProperties","Promise","reject","error"],"mappings":";;AAAA;;AAIA;;AACA;;;;AAEAA,MAAM,CAACC,OAAP,GAAiB,gBAAgB;AAAEC,EAAAA,EAAF;AAAMC,EAAAA,cAAN;AAAsBC,EAAAA,WAAW,GAAG;AAApC,CAAhB,EAA6D;AAAA,eAEhD,MAAM,KAAKC,MAAL,CAAYC,QAAZ,EAF0C;AAAA,QAElEC,aAFkE,QAElEA,aAFkE;;AAG1E,MAAI;AAEA,UAAMC,UAAU,GAAG,MAAMD,aAAa,CAACE,QAAd,CAAuB;AAAEP,MAAAA,EAAF;AAAMQ,MAAAA,KAAK,EAAEC,sBAAb;AAA0BP,MAAAA,WAAW,EAAE;AAAvC,KAAvB,CAAzB;AACA,UAAMQ,GAAG,GAAG,MAAMJ,UAAU,CAACK,MAAX,CAAkBC,4BAAlB,EAAqCA,4BAArC,CAAlB;AACA,UAAMC,eAAe,GAAG,MAAMR,aAAa,CAACE,QAAd,CAAuB;AAAEP,MAAAA,EAAE,EAAEU,GAAG,CAAC,CAAD,CAAT;AAAcF,MAAAA,KAAK,EAAEI,4BAArB;AAAwCV,MAAAA,WAAW,EAAE;AAArD,KAAvB,CAA9B;;AACA,QAAIW,eAAe,CAACC,IAApB,EAA0B;AACtB,YAAMD,eAAe,CAACE,cAAhB,CAA+B;AAAEC,QAAAA,IAAI,EAAEf;AAAR,OAA/B,CAAN;AACA,aAAOC,WAAW,GAAGW,eAAH,GAAqBA,eAAe,CAACI,aAAhB,EAAvC;AACH;;AACD,WAAOC,OAAO,CAACC,MAAR,CAAe,qBAAc;AAAEX,MAAAA,KAAK,EAAEI;AAAT,KAAd,CAAf,CAAP;AACH,GAVD,CAWA,OAAOQ,KAAP,EAAc;AACV,UAAM,oBAAkB;AAAEA,MAAAA;AAAF,KAAlB,CAAN;AACH;AACJ,CAjBD","sourcesContent":["import {\n    MODEL_AGENT,\n    MODEL_POST_FORMAT\n} from '../../../util/constants';\nimport NotFoundError from '../../errors/global.not-found-error';\nimport RedisErrorHandler from '../../errors/redis.error-handler';\n\nmodule.exports = async function ({ id, postFormatData, returnModel = false }) {\n\n    const { globalService } = await this.server.services();\n    try {\n\n        const AgentModel = await globalService.findById({ id, model: MODEL_AGENT, returnModel: true });\n        const ids = await AgentModel.getAll(MODEL_POST_FORMAT, MODEL_POST_FORMAT);\n        const PostFormatModel = await globalService.findById({ id: ids[0], model: MODEL_POST_FORMAT, returnModel: true });\n        if (PostFormatModel.inDb) {\n            await PostFormatModel.updateInstance({ data: postFormatData });\n            return returnModel ? PostFormatModel : PostFormatModel.allProperties();\n        }\n        return Promise.reject(NotFoundError({ model: MODEL_POST_FORMAT }));\n    }\n    catch (error) {\n        throw RedisErrorHandler({ error });\n    }\n};\n"],"file":"agent.update-post-format.service.js"}