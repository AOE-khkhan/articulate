{"version":3,"sources":["../../../../server/lib/services/agent/agent.parse-regex-keywords.service.js"],"names":["module","exports","AgentModel","text","server","services","globalService","keywords","loadAllLinked","parentModel","model","MODEL_KEYWORD","regexs","forEach","keyword","regex","type","push","name","keywordName","pattern","keywordType","examples","regexKeywords","regexToTest","RegExp","test","resultParsed","exec","startIndex","indexOf","endIndex","length","resultToSend","Object","assign","resolvedRegex","start","end","regexType","_","cloneDeep","regexExample","keywordValue","value","synonyms","foundRegex","syn","match"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport { MODEL_KEYWORD } from '../../../util/constants';\n\nmodule.exports = async function ({ AgentModel, text }) {\n\n    const { globalService } = await this.server.services();\n    const keywords = await globalService.loadAllLinked({ parentModel: AgentModel, model: MODEL_KEYWORD });\n    const regexs = [];\n    keywords.forEach((keyword) => {\n\n        if (keyword.regex && keyword.regex !== '' && keyword.type !== 'regex') {\n            regexs.push({ name: keyword.keywordName, pattern: keyword.regex, keywordType: keyword.type });\n        }\n        if (keyword.type === 'regex') {\n\n            regexs.push({ name: keyword.keywordName, examples: keyword.examples, keywordType: keyword.type });\n        }\n    });\n    const regexKeywords = [];\n    regexs.forEach((regex) => {\n\n        if (regex.pattern) {\n            const regexToTest = new RegExp(regex.pattern, 'i');\n            if (regexToTest.test(text)) {\n                const resultParsed = regexToTest.exec(text);\n                const startIndex = text.indexOf(resultParsed[0]);\n                const endIndex = startIndex + resultParsed[0].length;\n                const resultToSend = Object.assign(regex, { resolvedRegex: resultParsed[0], start: startIndex, end: endIndex, regexType: 'sysRegex' });\n                regexKeywords.push(_.cloneDeep(resultToSend));\n            }\n        }\n        if (regex.keywordType === 'regex') {\n            regex.examples.forEach((regexExample) => {\n\n                const keywordValue = regexExample.value;\n                if (regexExample.synonyms.indexOf(keywordValue) < 0) {\n                    regexExample.synonyms.push(keywordValue);\n                }\n                const foundRegex = [];\n                regexExample.synonyms.forEach((syn) => {\n\n                    const regexToTest = new RegExp(syn, 'ig');\n                    let match;\n\n                    if (match = regexToTest.exec(text)) {\n\n                        while (match) {\n                            if (foundRegex.indexOf(match) < 0) {\n                                const startIndex = text.indexOf(match[0]);\n                                const endIndex = startIndex + match[0].length;\n                                const resultToSend = Object.assign(regex, { resolvedRegex: match[0], keywordValue, start: startIndex, end: endIndex, regexType: 'keywordRegex' });\n                                regexKeywords.push(_.cloneDeep(resultToSend));\n                                foundRegex.push(match[0]);\n                                match = regexToTest.exec(text);\n\n                            }\n                        }\n                    }\n\n                });\n            });\n        }\n        return regexKeywords;\n    });\n};\n"],"file":"agent.parse-regex-keywords.service.js"}