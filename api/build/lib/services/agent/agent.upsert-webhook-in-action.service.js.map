{"version":3,"sources":["../../../../server/lib/services/agent/agent.upsert-webhook-in-action.service.js"],"names":["module","exports","id","actionId","data","returnModel","server","services","globalService","webhookService","modelPath","model","MODEL_AGENT","MODEL_ACTION","actionModel","findInModelPath","children","getAll","MODEL_WEBHOOK","length","update","create","parent","error"],"mappings":";;AAAA;;AAKA;;;;AAEAA,MAAM,CAACC,OAAP,GAAiB,gBAAgB;AAAEC,EAAAA,EAAF;AAAMC,EAAAA,QAAN;AAAgBC,EAAAA,IAAhB;AAAsBC,EAAAA,WAAW,GAAG;AAApC,CAAhB,EAA6D;AAAA,eAEhC,MAAM,KAAKC,MAAL,CAAYC,QAAZ,EAF0B;AAAA,QAElEC,aAFkE,QAElEA,aAFkE;AAAA,QAEnDC,cAFmD,QAEnDA,cAFmD;;AAI1E,MAAI;AACA,UAAMC,SAAS,GAAG,CACd;AAAEC,MAAAA,KAAK,EAAEC,sBAAT;AAAsBV,MAAAA;AAAtB,KADc,EAEd;AAAES,MAAAA,KAAK,EAAEE,uBAAT;AAAuBX,MAAAA,EAAE,EAAEC;AAA3B,KAFc,CAAlB;AAIA,QAAIW,WAAW,GAAG,MAAMN,aAAa,CAACO,eAAd,CAA8B;AAAEL,MAAAA,SAAF;AAAaL,MAAAA,WAAW,EAAE;AAA1B,KAA9B,CAAxB;AACAS,IAAAA,WAAW,GAAGA,WAAW,CAACV,IAA1B;AACA,UAAMY,QAAQ,GAAG,MAAMF,WAAW,CAACG,MAAZ,CAAmBC,wBAAnB,EAAkCA,wBAAlC,CAAvB;;AACA,QAAIF,QAAQ,CAACG,MAAT,GAAkB,CAAtB,EAAyB;AAAE;AACvB,aAAO,MAAMV,cAAc,CAACW,MAAf,CAAsB;AAC/BlB,QAAAA,EAAE,EAAEc,QAAQ,CAAC,CAAD,CADmB;AAE/BZ,QAAAA,IAF+B;AAG/BC,QAAAA;AAH+B,OAAtB,CAAb;AAMH,KAfD,CAeE;;;AAEF,WAAO,MAAMI,cAAc,CAACY,MAAf,CAAsB;AAC/BjB,MAAAA,IAD+B;AAE/BkB,MAAAA,MAAM,EAAER,WAFuB;AAG/BT,MAAAA;AAH+B,KAAtB,CAAb;AAKH,GAtBD,CAuBA,OAAOkB,KAAP,EAAc;AACV,UAAM,oBAAkB;AAAEA,MAAAA;AAAF,KAAlB,CAAN;AACH;AACJ,CA9BD","sourcesContent":["import {\n    MODEL_ACTION,\n    MODEL_AGENT,\n    MODEL_WEBHOOK\n} from '../../../util/constants';\nimport RedisErrorHandler from '../../errors/redis.error-handler';\n\nmodule.exports = async function ({ id, actionId, data, returnModel = false }) {\n\n    const { globalService, webhookService } = await this.server.services();\n\n    try {\n        const modelPath = [\n            { model: MODEL_AGENT, id },\n            { model: MODEL_ACTION, id: actionId }\n        ];\n        let actionModel = await globalService.findInModelPath({ modelPath, returnModel: true });\n        actionModel = actionModel.data;\n        const children = await actionModel.getAll(MODEL_WEBHOOK, MODEL_WEBHOOK);\n        if (children.length > 0) { // Update\n            return await webhookService.update({\n                id: children[0],\n                data,\n                returnModel\n            });\n\n        } // Create\n\n        return await webhookService.create({\n            data,\n            parent: actionModel,\n            returnModel\n        });\n    }\n    catch (error) {\n        throw RedisErrorHandler({ error });\n    }\n};\n"],"file":"agent.upsert-webhook-in-action.service.js"}