{"version":3,"sources":["../../../../server/lib/services/agent/agent.converse-update-context-frames.service.js"],"names":["module","exports","id","frames","redis","server","app","services","frameService","ContextModel","factory","MODEL_CONTEXT","framesToUpdate","_","filter","frame","isNil","framesToCreate","without","Promise","all","map","frameId","data","update","create","context","error"],"mappings":";;AAAA;;AACA;;AACA;;;;;;;;AAEAA,MAAM,CAACC,OAAP,GAAiB,gBAAgB;AAAEC,EAAAA,EAAF;AAAMC,EAAAA;AAAN,CAAhB,EAAgC;AAAA,QAErCC,KAFqC,GAE3B,KAAKC,MAAL,CAAYC,GAFe,CAErCF,KAFqC;;AAAA,eAGpB,MAAM,KAAKC,MAAL,CAAYE,QAAZ,EAHc;AAAA,QAGrCC,YAHqC,QAGrCA,YAHqC;;AAK7C,MAAI;AACA,UAAMC,YAAY,GAAG,MAAML,KAAK,CAACM,OAAN,CAAcC,wBAAd,EAA6BT,EAA7B,CAA3B;;AACA,UAAMU,cAAc,GAAGC,gBAAEC,MAAF,CAASX,MAAT,EAAkBY,KAAD,IAAW;AAE/C,aAAO,CAACF,gBAAEG,KAAF,CAAQD,KAAK,CAACb,EAAd,CAAR;AACH,KAHsB,CAAvB;;AAIA,UAAMe,cAAc,GAAGJ,gBAAEK,OAAF,CAAUf,MAAV,EAAkB,GAAGS,cAArB,CAAvB;;AAEA,UAAMO,OAAO,CAACC,GAAR,CAAYR,cAAc,CAACS,GAAf,CAAmB,MAAON,KAAP,IAAiB;AAAA,YAEtCO,OAFsC,GAEjBP,KAFiB,CAE1Cb,EAF0C;AAAA,YAE1BqB,IAF0B,4BAEjBR,KAFiB;;AAGlD,aAAO,MAAMP,YAAY,CAACgB,MAAb,CAAoB;AAAEtB,QAAAA,EAAE,EAAEoB,OAAN;AAAeC,QAAAA;AAAf,OAApB,CAAb;AACH,KAJiB,CAAZ,CAAN;AAMA,UAAMJ,OAAO,CAACC,GAAR,CAAYH,cAAc,CAACI,GAAf,CAAmB,MAAOE,IAAP,IAAgB;AAEjD,aAAO,MAAMf,YAAY,CAACiB,MAAb,CAAoB;AAAEF,QAAAA,IAAF;AAAQG,QAAAA,OAAO,EAAEjB;AAAjB,OAApB,CAAb;AACH,KAHiB,CAAZ,CAAN;AAIH,GAlBD,CAmBA,OAAOkB,KAAP,EAAc;AACV,UAAM,oBAAkB;AAAEA,MAAAA;AAAF,KAAlB,CAAN;AACH;AACJ,CA3BD","sourcesContent":["import _ from 'lodash';\nimport { MODEL_CONTEXT } from '../../../util/constants';\nimport RedisErrorHandler from '../../errors/redis.error-handler';\n\nmodule.exports = async function ({ id, frames }) {\n\n    const { redis } = this.server.app;\n    const { frameService } = await this.server.services();\n\n    try {\n        const ContextModel = await redis.factory(MODEL_CONTEXT, id);\n        const framesToUpdate = _.filter(frames, (frame) => {\n\n            return !_.isNil(frame.id);\n        });\n        const framesToCreate = _.without(frames, ...framesToUpdate);\n\n        await Promise.all(framesToUpdate.map(async (frame) => {\n\n            const { id: frameId, ...data } = frame;\n            return await frameService.update({ id: frameId, data });\n        }));\n\n        await Promise.all(framesToCreate.map(async (data) => {\n\n            return await frameService.create({ data, context: ContextModel });\n        }));\n    }\n    catch (error) {\n        throw RedisErrorHandler({ error });\n    }\n};\n"],"file":"agent.converse-update-context-frames.service.js"}