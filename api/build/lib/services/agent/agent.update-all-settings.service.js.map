{"version":3,"sources":["../../../../server/lib/services/agent/agent.update-all-settings.service.js"],"names":["module","exports","id","settingsData","AgentModel","returnModel","server","services","globalService","findById","model","MODEL_AGENT","oldSettings","property","newSettings","trainingSettingsChanged","CONFIG_SETTINGS_RASA_TRAINING","some","setting","_","isEqual","STATUS_OUT_OF_DATE","saveInstance","allProperties","error"],"mappings":";;AAAA;;AACA;;AACA;;;;;;;;AAEAA,MAAM,CAACC,OAAP,GAAiB,gBAAgB;AAAEC,EAAAA,EAAF;AAAMC,EAAAA,YAAN;AAAoBC,EAAAA,UAAU,GAAG,IAAjC;AAAuCC,EAAAA,WAAW,GAAG;AAArD,CAAhB,EAA8E;AAAA,eAEjE,MAAM,KAAKC,MAAL,CAAYC,QAAZ,EAF2D;AAAA,QAEnFC,aAFmF,QAEnFA,aAFmF;;AAG3F,MAAI;AACAJ,IAAAA,UAAU,GAAGA,UAAU,KAAI,MAAMI,aAAa,CAACC,QAAd,CAAuB;AAAEP,MAAAA,EAAF;AAAMQ,MAAAA,KAAK,EAAEC,sBAAb;AAA0BN,MAAAA,WAAW,EAAE;AAAvC,KAAvB,CAAV,CAAvB,CADA,CAGA;;AACA,UAAMO,WAAW,GAAGR,UAAU,CAACS,QAAX,CAAoB,UAApB,CAApB;;AACA,UAAMC,WAAW,qBAAQF,WAAR,EAAwBT,YAAxB,CAAjB;;AAEA,UAAMY,uBAAuB,GAAGC,yCAA8BC,IAA9B,CAAoCC,OAAD,IAAa;AAE5E,aAAO,CAACC,gBAAEC,OAAF,CAAUR,WAAW,CAACM,OAAD,CAArB,EAAgCJ,WAAW,CAACI,OAAD,CAA3C,CAAR;AACH,KAH+B,CAAhC;;AAIA,QAAIH,uBAAJ,EAA4B;AACxB,YAAMX,UAAU,CAACS,QAAX,CAAoB,QAApB,EAA8BQ,6BAA9B,CAAN;AACH;;AACD,UAAMjB,UAAU,CAACS,QAAX,CAAoB,UAApB,EAAgCC,WAAhC,CAAN;AACA,UAAMV,UAAU,CAACkB,YAAX,EAAN;AACA,WAAOjB,WAAW,GAAGD,UAAH,GAAgBA,UAAU,CAACmB,aAAX,EAAlC;AACH,GAjBD,CAkBA,OAAOC,KAAP,EAAc;AACV,UAAM,oBAAkB;AAAEA,MAAAA;AAAF,KAAlB,CAAN;AACH;AACJ,CAxBD","sourcesContent":["import { MODEL_AGENT, STATUS_OUT_OF_DATE, CONFIG_SETTINGS_RASA_TRAINING } from '../../../util/constants';\nimport RedisErrorHandler from '../../errors/redis.error-handler';\nimport _ from 'lodash';\n\nmodule.exports = async function ({ id, settingsData, AgentModel = null, returnModel = false }) {\n\n    const { globalService } = await this.server.services();\n    try {\n        AgentModel = AgentModel || await globalService.findById({ id, model: MODEL_AGENT, returnModel: true });\n\n        //Keep settings that are not in the new object\n        const oldSettings = AgentModel.property('settings');\n        const newSettings = { ...oldSettings, ...settingsData };\n\n        const trainingSettingsChanged = CONFIG_SETTINGS_RASA_TRAINING.some((setting) => {\n\n            return !_.isEqual(oldSettings[setting], newSettings[setting]);\n        });\n        if (trainingSettingsChanged){\n            await AgentModel.property('status', STATUS_OUT_OF_DATE);\n        }\n        await AgentModel.property('settings', newSettings);\n        await AgentModel.saveInstance();\n        return returnModel ? AgentModel : AgentModel.allProperties();\n    }\n    catch (error) {\n        throw RedisErrorHandler({ error });\n    }\n};\n"],"file":"agent.update-all-settings.service.js"}