{"version":3,"sources":["../../../../server/lib/services/agent/agent.train.service.js"],"names":["generateTrainingDataForCategoriesRecognizer","AgentModel","CategoryModels","globalService","categoryService","enableModelsPerCategory","countOfCategoriesWithData","rasaNLUData","RASA_COMMON_EXAMPLES","RASA_REGEX_FEATURES","RASA_ENTITY_SYNONYMS","CategoryModel","sayingIds","getAll","MODEL_SAYING","length","categoryName","property","extraTrainingData","keywords","loadAllByIds","ids","MODEL_KEYWORD","model","sayings","categoryTrainingData","generateTrainingData","_","flatten","RASA_NLU_DATA","trainingData","allAgentKeywords","modifiersTrainingData","RASA_MODEL_MODIFIERS","module","exports","id","returnModel","redis","server","app","services","rasaNLUService","Guid","create","toString","factory","MODEL_AGENT","agent","allProperties","markedAsTraining","MODEL_CATEGORY","categoriesTrainingData","pipeline","settings","CONFIG_SETTINGS_CATEGORY_PIPELINE","categoryRecognizerModel","agentName","RASA_MODEL_CATEGORY_RECOGNIZER","STATUS_TRAINING","saveInstance","train","project","oldModel","trainingSet","language","baseURL","CONFIG_SETTINGS_RASA_URL","CategoryModelsToTrain","filter","status","STATUS_OUT_OF_DATE","STATUS_ERROR","numberOfSayings","CONFIG_SETTINGS_KEYWORD_PIPELINE","CONFIG_SETTINGS_SAYING_PIPELINE","RASA_MODEL_JUST_ER","RASA_MODEL_DEFAULT","modifiersRecognizerModel","modifiersRecognizerJustER","intent","CurrentAgentModel","currentAgent","utc","format","STATUS_READY","Promise","reject","error"],"mappings":"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","sourcesContent":["import Guid from 'guid';\nimport _ from 'lodash';\nimport Moment from 'moment';\nimport {\n    CONFIG_SETTINGS_CATEGORY_PIPELINE,\n    CONFIG_SETTINGS_KEYWORD_PIPELINE,\n    CONFIG_SETTINGS_RASA_URL,\n    CONFIG_SETTINGS_SAYING_PIPELINE,\n    MODEL_AGENT,\n    MODEL_CATEGORY,\n    MODEL_KEYWORD,\n    MODEL_SAYING,\n    RASA_COMMON_EXAMPLES,\n    RASA_ENTITY_SYNONYMS,\n    RASA_MODEL_CATEGORY_RECOGNIZER,\n    RASA_MODEL_DEFAULT,\n    RASA_MODEL_JUST_ER,\n    RASA_MODEL_MODIFIERS,\n    RASA_NLU_DATA,\n    RASA_REGEX_FEATURES,\n    STATUS_ERROR,\n    STATUS_OUT_OF_DATE,\n    STATUS_READY,\n    STATUS_TRAINING\n} from '../../../util/constants';\nimport RedisErrorHandler from '../../errors/redis.error-handler';\nimport InvalidAgentTrain from '../../errors/global.invalid-agent-train';\n\nconst generateTrainingDataForCategoriesRecognizer = async ({ AgentModel, CategoryModels, globalService, categoryService, enableModelsPerCategory }) => {\n\n    let countOfCategoriesWithData = 0;\n    let rasaNLUData = {\n        [RASA_COMMON_EXAMPLES]: [],\n        [RASA_REGEX_FEATURES]: [],\n        [RASA_ENTITY_SYNONYMS]: []\n    };\n\n    if (enableModelsPerCategory) {\n        for (let CategoryModel of CategoryModels) {\n\n            const sayingIds = await CategoryModel.getAll(MODEL_SAYING, MODEL_SAYING);\n            if (sayingIds.length > 1) { // If the category only have 1 saying then RASA will fail during training\n                countOfCategoriesWithData++;\n                const categoryName = CategoryModel.property('categoryName');\n                const extraTrainingData = CategoryModel.property('extraTrainingData');\n                const keywords = await globalService.loadAllByIds({ ids: await CategoryModel.getAll(MODEL_KEYWORD, MODEL_KEYWORD), model: MODEL_KEYWORD });\n                const sayings = await globalService.loadAllByIds({ ids: await CategoryModel.getAll(MODEL_SAYING, MODEL_SAYING), model: MODEL_SAYING });\n                const categoryTrainingData = await categoryService.generateTrainingData({ keywords, sayings, extraTrainingData, categoryName });\n                rasaNLUData[RASA_COMMON_EXAMPLES] = _.flatten([rasaNLUData[RASA_COMMON_EXAMPLES], categoryTrainingData[RASA_NLU_DATA][RASA_COMMON_EXAMPLES]]);\n                rasaNLUData[RASA_REGEX_FEATURES] = _.flatten([rasaNLUData[RASA_REGEX_FEATURES], categoryTrainingData[RASA_NLU_DATA][RASA_REGEX_FEATURES]]);\n                rasaNLUData[RASA_ENTITY_SYNONYMS] = _.flatten([rasaNLUData[RASA_ENTITY_SYNONYMS], categoryTrainingData[RASA_NLU_DATA][RASA_ENTITY_SYNONYMS]]);\n            }\n        }\n    }\n    else {\n        const keywords = await globalService.loadAllByIds({ ids: await AgentModel.getAll(MODEL_KEYWORD, MODEL_KEYWORD), model: MODEL_KEYWORD });\n        const sayings = await globalService.loadAllByIds({ ids: await AgentModel.getAll(MODEL_SAYING, MODEL_SAYING), model: MODEL_SAYING });\n        const trainingData = await categoryService.generateTrainingData({ keywords, sayings, extraTrainingData: AgentModel.property('extraTrainingData'), categoryName: 'default' });\n        rasaNLUData = trainingData[RASA_NLU_DATA];\n        countOfCategoriesWithData = trainingData[RASA_NLU_DATA][RASA_COMMON_EXAMPLES].length > 1 ? 1 : 0;\n    }\n\n    const allAgentKeywords = await globalService.loadAllByIds({ ids: await AgentModel.getAll(MODEL_KEYWORD, MODEL_KEYWORD), model: MODEL_KEYWORD });\n    const modifiersTrainingData = await categoryService.generateTrainingData({ keywords: allAgentKeywords, extraTrainingData: AgentModel.property('extraTrainingData'), categoryName: `${AgentModel.property('agentName')}_${RASA_MODEL_MODIFIERS}` });\n    if (modifiersTrainingData[RASA_NLU_DATA][RASA_COMMON_EXAMPLES].length > 1) {\n        countOfCategoriesWithData++;\n        rasaNLUData[RASA_COMMON_EXAMPLES] = _.flatten([rasaNLUData[RASA_COMMON_EXAMPLES], modifiersTrainingData[RASA_NLU_DATA][RASA_COMMON_EXAMPLES]]);\n        rasaNLUData[RASA_REGEX_FEATURES] = _.flatten([rasaNLUData[RASA_REGEX_FEATURES], modifiersTrainingData[RASA_NLU_DATA][RASA_REGEX_FEATURES]]);\n        rasaNLUData[RASA_ENTITY_SYNONYMS] = _.flatten([rasaNLUData[RASA_ENTITY_SYNONYMS], modifiersTrainingData[RASA_NLU_DATA][RASA_ENTITY_SYNONYMS]]);\n    }\n\n    return {\n        rasaNLUData,\n        countOfCategoriesWithData\n    };\n};\n\nmodule.exports = async function ({ id, returnModel = false }) {\n\n    const { redis } = this.server.app;\n\n    const { globalService, categoryService, rasaNLUService } = await this.server.services();\n\n    let model = Guid.create().toString();\n    try {\n        const AgentModel = await redis.factory(MODEL_AGENT, id);\n        const agent = AgentModel.allProperties();\n        let markedAsTraining = false;\n        //const rasaStatus = await rasaNLU.Status();\n\n        const CategoryModels = await globalService.loadAllByIds({\n            ids: await AgentModel.getAll(MODEL_CATEGORY, MODEL_CATEGORY),\n            model: MODEL_CATEGORY,\n            returnModel: true\n        });\n\n        //Train category identifier (If enableModelsPerCategory is false will train a category recognizer between default model and modifiers)\n        if ((agent.enableModelsPerCategory && CategoryModels.length > 1) || (!agent.enableModelsPerCategory && CategoryModels.length > 0)) {\n            const categoriesTrainingData = await generateTrainingDataForCategoriesRecognizer({ AgentModel, CategoryModels, globalService, categoryService, enableModelsPerCategory: agent.enableModelsPerCategory });\n\n            if (categoriesTrainingData.countOfCategoriesWithData > 1) {\n                const pipeline = agent.settings[CONFIG_SETTINGS_CATEGORY_PIPELINE];\n                const categoryRecognizerModel = `${agent.agentName}${RASA_MODEL_CATEGORY_RECOGNIZER}`;\n                AgentModel.property('status', STATUS_TRAINING);\n                await AgentModel.saveInstance();\n                markedAsTraining = true;\n                await rasaNLUService.train({\n                    project: agent.agentName,\n                    model: categoryRecognizerModel,\n                    oldModel: categoryRecognizerModel,\n                    trainingSet: {\n                        [RASA_NLU_DATA]: categoriesTrainingData.rasaNLUData\n                    },\n                    pipeline,\n                    language: agent.language,\n                    baseURL: agent.settings[CONFIG_SETTINGS_RASA_URL]\n                });\n                AgentModel.property('categoryRecognizer', true);\n            }\n            else {\n                AgentModel.property('categoryRecognizer', false);\n            }\n        }\n\n        if (agent.enableModelsPerCategory) {\n\n            //const trainingLimit = rasaStatus[RASA_MAX_TRAINING_PROCESSES] - rasaStatus[RASA_CURRENT_TRAINING_PROCESSES];\n            const CategoryModelsToTrain = CategoryModels.filter((CategoryModel) => {\n\n                const status = CategoryModel.property('status');\n                return status === STATUS_OUT_OF_DATE || status === STATUS_ERROR;\n            });\n\n            //Train each category that need it\n            if (CategoryModelsToTrain.length > 0) {\n                //TODO: Do it in Parallel\n                for (let CategoryModel of CategoryModels) {\n                    const status = CategoryModel.property('status');\n                    if (status === STATUS_ERROR || status === STATUS_OUT_OF_DATE) {\n                        if (!markedAsTraining){\n                            AgentModel.property('status', STATUS_TRAINING);\n                            await AgentModel.saveInstance();\n                            markedAsTraining = true;\n                        }\n                        await categoryService.train({ AgentModel, CategoryModel });\n                    }\n                }\n            }\n        }\n        else {\n            //Train default model\n            const keywords = await globalService.loadAllByIds({ ids: await AgentModel.getAll(MODEL_KEYWORD, MODEL_KEYWORD), model: MODEL_KEYWORD });\n            const sayings = await globalService.loadAllByIds({ ids: await AgentModel.getAll(MODEL_SAYING, MODEL_SAYING), model: MODEL_SAYING });\n            const trainingData = await categoryService.generateTrainingData({ keywords, sayings, extraTrainingData: agent.extraTrainingData });\n            if (trainingData.numberOfSayings === 0) {\n                return;\n            }\n            const pipeline = trainingData.numberOfSayings === 1 ? agent.settings[CONFIG_SETTINGS_KEYWORD_PIPELINE] : agent.settings[CONFIG_SETTINGS_SAYING_PIPELINE];\n            model = (trainingData.numberOfSayings === 1 ? RASA_MODEL_JUST_ER : '') + model;\n            model = `${RASA_MODEL_DEFAULT}${model}`;\n            if (!markedAsTraining){\n                AgentModel.property('status', STATUS_TRAINING);\n                await AgentModel.saveInstance();\n                markedAsTraining = true;\n            }\n            await rasaNLUService.train({\n                project: agent.agentName,\n                model,\n                oldModel: agent.model || null,\n                trainingSet: {\n                    [RASA_NLU_DATA]: trainingData[RASA_NLU_DATA]\n                },\n                pipeline,\n                language: agent.language,\n                baseURL: agent.settings[CONFIG_SETTINGS_RASA_URL]\n            });\n        }\n\n        //train modifiers model\n        const rasaNLUData = {\n            [RASA_COMMON_EXAMPLES]: [],\n            [RASA_REGEX_FEATURES]: [],\n            [RASA_ENTITY_SYNONYMS]: []\n        };\n\n        const keywords = await globalService.loadAllByIds({ ids: await AgentModel.getAll(MODEL_KEYWORD, MODEL_KEYWORD), model: MODEL_KEYWORD });\n        const modifiersTrainingData = await categoryService.generateTrainingData({ keywords, extraTrainingData: agent.extraTrainingData });\n        rasaNLUData[RASA_COMMON_EXAMPLES] = _.flatten([rasaNLUData[RASA_COMMON_EXAMPLES], modifiersTrainingData[RASA_NLU_DATA][RASA_COMMON_EXAMPLES]]);\n        rasaNLUData[RASA_REGEX_FEATURES] = _.flatten([rasaNLUData[RASA_REGEX_FEATURES], modifiersTrainingData[RASA_NLU_DATA][RASA_REGEX_FEATURES]]);\n        rasaNLUData[RASA_ENTITY_SYNONYMS] = _.flatten([rasaNLUData[RASA_ENTITY_SYNONYMS], modifiersTrainingData[RASA_NLU_DATA][RASA_ENTITY_SYNONYMS]]);\n\n        if (modifiersTrainingData.numberOfSayings > 0) {\n            const pipeline = modifiersTrainingData.numberOfSayings === 1 ? agent.settings[CONFIG_SETTINGS_KEYWORD_PIPELINE] : agent.settings[CONFIG_SETTINGS_SAYING_PIPELINE];\n            const modifiersRecognizerModel = `${agent.agentName}_${modifiersTrainingData.numberOfSayings === 1 ? `${RASA_MODEL_JUST_ER}` : ''}${RASA_MODEL_MODIFIERS}`;\n            if (!markedAsTraining){\n                AgentModel.property('status', STATUS_TRAINING);\n                await AgentModel.saveInstance();\n                markedAsTraining = true;\n            }\n            await rasaNLUService.train({\n                project: agent.agentName,\n                model: modifiersRecognizerModel,\n                oldModel: `${agent.agentName}_${agent.modifiersRecognizerJustER ? `${RASA_MODEL_JUST_ER}` : ''}${RASA_MODEL_MODIFIERS}`,\n                trainingSet: {\n                    [RASA_NLU_DATA]: rasaNLUData\n                },\n                pipeline,\n                language: agent.language,\n                baseURL: agent.settings[CONFIG_SETTINGS_RASA_URL]\n            });\n            AgentModel.property('modifiersRecognizer', true);\n        }\n        else {\n            AgentModel.property('modifiersRecognizer', false);\n        }\n        //If there is just one modifier set the modifiersRecognizerJustER attribute of the agent with the name of that modifier\n        AgentModel.property('modifiersRecognizerJustER', modifiersTrainingData.numberOfSayings === 1 ? rasaNLUData[RASA_COMMON_EXAMPLES][0].intent : '');\n\n        AgentModel.property('model', model);\n        /*\n            Only change the status to ready if the status is still training, because if not we are going to mark\n            an agent as ready when actually it could be out of date because user edited while it was being trained\n        */\n\n        if (markedAsTraining){\n            const CurrentAgentModel = await redis.factory(MODEL_AGENT, id);\n            const currentAgent = CurrentAgentModel.allProperties();\n            if (currentAgent.status === STATUS_TRAINING){\n                AgentModel.property('lastTraining', Moment().utc().format());\n                AgentModel.property('status', STATUS_READY);\n            }\n            await AgentModel.saveInstance();\n            return returnModel ? AgentModel : AgentModel.allProperties();\n        }\n        return Promise.reject(InvalidAgentTrain({ agent: agent.agentName }));\n    }\n    catch (error) {\n        const AgentModel = await redis.factory(MODEL_AGENT, id);\n        AgentModel.property('status', STATUS_ERROR);\n        await AgentModel.saveInstance();\n        throw RedisErrorHandler({ error });\n    }\n};\n"],"file":"agent.train.service.js"}