{"version":3,"sources":["../../../../server/lib/services/agent/agent.find-all-sayings.service.js"],"names":["module","exports","id","loadCategoryId","skip","limit","direction","field","filter","server","services","globalService","redis","app","AgentModel","findById","model","MODEL_AGENT","returnModel","sayingsIds","getAll","MODEL_SAYING","category","categoryFilter","actions","actionFilter","query","restOfFilters","newFilter","userSays","allSayings","Promise","all","map","sayingId","loadWithIncludes","relationNames","MODEL_CATEGORY","MODEL_ACTION","_","isArray","filteredSayings","length","saying","categories","includes","SayingModel","factory","SayingModelsCount","findAllByIds","ids","SayingModels","totalCount","data","sayingModel","find","get","error"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport {\n    MODEL_ACTION,\n    MODEL_AGENT,\n    MODEL_CATEGORY,\n    MODEL_SAYING\n} from '../../../util/constants';\nimport RedisErrorHandler from '../../errors/redis.error-handler';\n\nmodule.exports = async function ({ id, loadCategoryId, skip, limit, direction, field, filter = {} }) {\n\n    const { globalService } = await this.server.services();\n    const { redis } = this.server.app;\n\n    try {\n        const AgentModel = await globalService.findById({ id, model: MODEL_AGENT, returnModel: true });\n        const sayingsIds = await AgentModel.getAll(MODEL_SAYING, MODEL_SAYING);\n        let {\n            category: categoryFilter = [],\n            actions: actionFilter = [],\n            query,\n            ...restOfFilters\n        } = filter;\n        let newFilter = restOfFilters;\n        if (query) {\n            newFilter = { ...newFilter, ...{ userSays: query } };\n        }\n        const allSayings = await Promise.all(sayingsIds.map(async (sayingId) => {\n\n            return await globalService.loadWithIncludes({\n                model: MODEL_SAYING,\n                id: sayingId,\n                relationNames: [MODEL_CATEGORY, MODEL_ACTION]\n            });\n        }));\n        categoryFilter = _.isArray(categoryFilter) ? categoryFilter : [categoryFilter];\n        actionFilter = _.isArray(actionFilter) ? actionFilter : [actionFilter];\n        let filteredSayings = allSayings;\n        if (categoryFilter.length > 0) {\n            filteredSayings = filteredSayings.filter((saying) => {\n                const categories = _.map(saying[MODEL_CATEGORY], 'categoryName');\n                return _.includes(categories, ...categoryFilter);\n            });\n        }\n\n        if (actionFilter.length > 0) {\n            filteredSayings = filteredSayings.filter((saying) => {\n                return _.includes(saying.actions, ...actionFilter);\n            });\n        }\n\n        const SayingModel = await redis.factory(MODEL_SAYING);\n        // Can't perform a count with a filter, so we need to query all the sayings and then apply the filter\n        const SayingModelsCount = await SayingModel.findAllByIds({\n            ids: _.map(filteredSayings, 'id'),\n            limit: -1,\n            filter: newFilter\n        });\n        const SayingModels = await SayingModel.findAllByIds({\n            ids: _.map(filteredSayings, 'id'),\n            skip,\n            limit,\n            direction,\n            field,\n            filter: newFilter\n        });\n\n        const totalCount = SayingModelsCount.length;\n        const data = SayingModels.map((sayingModel) => {\n\n            const saying = _.find(filteredSayings, { id: sayingModel.id });\n            if (loadCategoryId) {\n                return {\n                    // ..._.omit(saying, [MODEL_CATEGORY, MODEL_ACTION]),\n                    ...saying,\n                    ...{\n                        category: _.get(saying, `${MODEL_CATEGORY}[0].id`, null)\n                    }\n                };\n            }\n\n            //return _.omit(saying, [MODEL_CATEGORY, MODEL_ACTION]);\n            return saying;\n\n        });\n        return { data, totalCount };\n    }\n    catch (error) {\n        throw RedisErrorHandler({ error });\n    }\n};\n"],"file":"agent.find-all-sayings.service.js"}