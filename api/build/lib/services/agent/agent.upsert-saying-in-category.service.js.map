{"version":3,"sources":["../../../../server/lib/services/agent/agent.upsert-saying-in-category.service.js"],"names":["filterById","models","ids","_","filter","model","includes","id","module","exports","categoryId","sayingId","sayingData","returnModel","redis","server","app","services","globalService","categoryService","keywordService","actionService","modelPath","MODEL_AGENT","MODEL_CATEGORY","modelPathIds","push","MODEL_SAYING","getAllModelsInPath","AgentModel","CategoryModel","SayingModel","factory","keywords","sortBy","keyword","start","agentKeywordIds","getAll","MODEL_KEYWORD","agentActionIds","MODEL_ACTION","map","agentKeywordId","parseInt","agentActionId","keywordIds","splitAddedOldRemovedIds","oldKeywords","isLoaded","property","newKeywords","AgentActionsModels","loadAllByIds","actionIds","oldActions","newActions","actions","notValidActionIds","difference","added","length","Promise","reject","agentId","notValidIds","addedNonSystem","FilteredKeywordModels","removed","newKeywordModelsNonSystem","newKeywordModels","removedKeywordModels","newActionModels","removedActionModels","parentModels","updateInstance","data","removedParents","concat","linkKeywords","keywordModels","unlinkKeywords","link","createInstance","STATUS_OUT_OF_DATE","saveInstance","allProperties","error"],"mappings":";;AAAA;;AACA;;AAQA;;AACA;;AACA;;;;AAEA;AAEA,MAAMA,UAAU,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAD,KAAqB;AAEpC,SAAOC,gBAAEC,MAAF,CAASH,MAAT,EAAkBI,KAAD,IAAW;AAC/B,WAAOF,gBAAEG,QAAF,CAAWJ,GAAX,EAAgBG,KAAK,CAACE,EAAtB,CAAP;AACH,GAFM,CAAP;AAGH,CALD;;AAOAC,MAAM,CAACC,OAAP,GAAiB,gBACb;AACIF,EAAAA,EADJ;AAEIG,EAAAA,UAFJ;AAGIC,EAAAA,QAAQ,GAAG,IAHf;AAIIC,EAAAA,UAJJ;AAKIC,EAAAA,WAAW,GAAG;AALlB,CADa,EAOV;AAAA,QAEKC,KAFL,GAEe,KAAKC,MAAL,CAAYC,GAF3B,CAEKF,KAFL;;AAAA,eAGuE,MAAM,KAAKC,MAAL,CAAYE,QAAZ,EAH7E;AAAA,QAGKC,aAHL,QAGKA,aAHL;AAAA,QAGoBC,eAHpB,QAGoBA,eAHpB;AAAA,QAGqCC,cAHrC,QAGqCA,cAHrC;AAAA,QAGqDC,aAHrD,QAGqDA,aAHrD;;AAIH,MAAI;AAEA,UAAMC,SAAS,GAAG,CAACC,sBAAD,EAAcC,yBAAd,CAAlB;AACA,UAAMC,YAAY,GAAG,CAAClB,EAAD,EAAKG,UAAL,EAAiBC,QAAjB,CAArB;;AACA,QAAIA,QAAJ,EAAc;AACVW,MAAAA,SAAS,CAACI,IAAV,CAAeC,uBAAf;AACAF,MAAAA,YAAY,CAACC,IAAb,CAAkBf,QAAlB;AACH,KAPD,CASA;;;AACA,UAAMV,MAAM,GAAG,MAAMiB,aAAa,CAACU,kBAAd,CAAiC;AAAEN,MAAAA,SAAF;AAAapB,MAAAA,GAAG,EAAEuB,YAAlB;AAAgCZ,MAAAA,WAAW,EAAE;AAA7C,KAAjC,CAArB;AACA,UAAMgB,UAAU,GAAG5B,MAAM,CAACsB,sBAAD,CAAzB;AACA,UAAMO,aAAa,GAAG7B,MAAM,CAACuB,yBAAD,CAA5B;AACA,UAAMO,WAAW,GAAG9B,MAAM,CAAC0B,uBAAD,CAAN,KAAwB,MAAMb,KAAK,CAACkB,OAAN,CAAcL,uBAAd,CAA9B,CAApB,CAbA,CAa+E;;AAE/Ef,IAAAA,UAAU,CAACqB,QAAX,GAAsB9B,gBAAE+B,MAAF,CAAStB,UAAU,CAACqB,QAApB,EAA+BE,OAAD,IAAaA,OAAO,CAACC,KAAnD,CAAtB,CAfA,CAiBA;;AACA,QAAIC,eAAe,GAAG,MAAMR,UAAU,CAACS,MAAX,CAAkBC,wBAAlB,EAAiCA,wBAAjC,CAA5B;AACA,QAAIC,cAAc,GAAG,MAAMX,UAAU,CAACS,MAAX,CAAkBG,uBAAlB,EAAgCA,uBAAhC,CAA3B;AACAJ,IAAAA,eAAe,GAAGA,eAAe,CAACK,GAAhB,CAAqBC,cAAD,IAAoBC,QAAQ,CAACD,cAAD,CAAhD,CAAlB;AACAH,IAAAA,cAAc,GAAGA,cAAc,CAACE,GAAf,CAAoBG,aAAD,IAAmBA,aAAtC,CAAjB;AACA,UAAMC,UAAU,GAAG1B,cAAc,CAAC2B,uBAAf,CAAuC;AACtDC,MAAAA,WAAW,EAAEjB,WAAW,CAACkB,QAAZ,GAAuB,qBAAElB,WAAW,CAACmB,QAAZ,CAAqB,UAArB,CAAF,CAAvB,GAA6D,EADpB;AAEtDC,MAAAA,WAAW,EAAEvC,UAAU,CAACqB;AAF8B,KAAvC,CAAnB;AAKA,UAAMmB,kBAAkB,GAAG,MAAMlC,aAAa,CAACmC,YAAd,CAA2B;AACxDnD,MAAAA,GAAG,EAAEsC,cADmD;AAExDnC,MAAAA,KAAK,EAAEoC,uBAFiD;AAGxD5B,MAAAA,WAAW,EAAE;AAH2C,KAA3B,CAAjC;AAMA,UAAMyC,SAAS,GAAGjC,aAAa,CAAC0B,uBAAd,CAAsC;AACpDQ,MAAAA,UAAU,EAAExB,WAAW,CAACkB,QAAZ,GAAuBlB,WAAW,CAACmB,QAAZ,CAAqB,SAArB,CAAvB,GAAyD,EADjB;AAEpDM,MAAAA,UAAU,EAAE5C,UAAU,CAAC6C,OAF6B;AAGpDL,MAAAA;AAHoD,KAAtC,CAAlB;;AAMA,UAAMM,iBAAiB,GAAGvD,gBAAEwD,UAAF,CAAaL,SAAS,CAACM,KAAvB,EAA8BpB,cAA9B,CAA1B;;AACA,QAAIkB,iBAAiB,CAACG,MAAlB,GAA2B,CAA/B,EAAkC;AAC9B,aAAOC,OAAO,CAACC,MAAR,CAAe,sBAAwB;AAAET,QAAAA,SAAS,EAAEI,iBAAb;AAAgCM,QAAAA,OAAO,EAAEnC,UAAU,CAACtB;AAApD,OAAxB,CAAf,CAAP;AACH,KA1CD,CA4CA;;;AACA,UAAM0D,WAAW,GAAG9D,gBAAEwD,UAAF,CAAab,UAAU,CAACoB,cAAxB,EAAwC7B,eAAxC,CAApB;;AACA,QAAI4B,WAAW,CAACJ,MAAZ,GAAqB,CAAzB,EAA4B;AACxB,aAAOC,OAAO,CAACC,MAAR,CAAe,qBAAyB;AAAEjB,QAAAA,UAAU,EAAEmB,WAAd;AAA2BD,QAAAA,OAAO,EAAEnC,UAAU,CAACtB;AAA/C,OAAzB,CAAf,CAAP;AACH;;AAED,UAAM4D,qBAAqB,GAAG,MAAMjD,aAAa,CAACmC,YAAd,CAA2B;AAC3DnD,MAAAA,GAAG,EAAE,CAAC,GAAG4C,UAAU,CAACc,KAAf,EAAsB,GAAGd,UAAU,CAACsB,OAApC,CADsD;AACR;AACnD/D,MAAAA,KAAK,EAAEkC,wBAFoD;AAG3D1B,MAAAA,WAAW,EAAE;AAH8C,KAA3B,CAApC;AAMA,UAAMwD,yBAAyB,GAAGrE,UAAU,CAAC;AAAEC,MAAAA,MAAM,EAAEkE,qBAAV;AAAiCjE,MAAAA,GAAG,EAAE4C,UAAU,CAACoB;AAAjD,KAAD,CAA5C;AACA,UAAMI,gBAAgB,GAAGtE,UAAU,CAAC;AAAEC,MAAAA,MAAM,EAAEkE,qBAAV;AAAiCjE,MAAAA,GAAG,EAAE4C,UAAU,CAACc;AAAjD,KAAD,CAAnC;AACA,UAAMW,oBAAoB,GAAGvE,UAAU,CAAC;AAAEC,MAAAA,MAAM,EAAEkE,qBAAV;AAAiCjE,MAAAA,GAAG,EAAE4C,UAAU,CAACsB;AAAjD,KAAD,CAAvC;AAEA,UAAMI,eAAe,GAAGxE,UAAU,CAAC;AAAEC,MAAAA,MAAM,EAAEmD,kBAAV;AAA8BlD,MAAAA,GAAG,EAAEoD,SAAS,CAACM;AAA7C,KAAD,CAAlC;AACA,UAAMa,mBAAmB,GAAGzE,UAAU,CAAC;AAAEC,MAAAA,MAAM,EAAEmD,kBAAV;AAA8BlD,MAAAA,GAAG,EAAEoD,SAAS,CAACc;AAA7C,KAAD,CAAtC;AAEA,UAAMM,YAAY,GAAG,CACjB7C,UADiB,EAEjBC,aAFiB,EAGjB,GAAGuC,yBAHc,EAIjB,GAAGG,eAJc,CAArB;;AAMA,QAAIzC,WAAW,CAACkB,QAAhB,EAA0B;AAAE;AACxB;AACA,YAAMlB,WAAW,CAAC4C,cAAZ,CAA2B;AAC7BC,QAAAA,IAAI,EAAEhE,UADuB;AAE7B8D,QAAAA,YAF6B;AAG7BG,QAAAA,cAAc,EAAEN,oBAAoB,CAACO,MAArB,CAA4BL,mBAA5B;AAHa,OAA3B,CAAN,CAFsB,CAOtB;;AACA,YAAMtD,eAAe,CAAC4D,YAAhB,CAA6B;AAAE1E,QAAAA,KAAK,EAAEyB,aAAT;AAAwBkD,QAAAA,aAAa,EAAEV;AAAvC,OAA7B,CAAN,CARsB,CAStB;;AACA,YAAMnD,eAAe,CAAC8D,cAAhB,CAA+B;AAAE5E,QAAAA,KAAK,EAAEyB,aAAT;AAAwBkD,QAAAA,aAAa,EAAET;AAAvC,OAA/B,CAAN;AACH,KAXD,MAYK;AAAE;AACHxC,MAAAA,WAAW,CAACmD,IAAZ,CAAiBpD,aAAjB,EAAgCN,yBAAhC,EADC,CAED;;AACA,YAAMO,WAAW,CAACoD,cAAZ,CAA2B;AAAEP,QAAAA,IAAI,EAAEhE,UAAR;AAAoB8D,QAAAA;AAApB,OAA3B,CAAN,CAHC,CAID;;AACA,YAAMvD,eAAe,CAAC4D,YAAhB,CAA6B;AAAE1E,QAAAA,KAAK,EAAEyB,aAAT;AAAwBkD,QAAAA,aAAa,EAAEV;AAAvC,OAA7B,CAAN;AACH,KAvFD,CAyFA;;;AACAzC,IAAAA,UAAU,CAACqB,QAAX,CAAoB,QAApB,EAA8BkC,6BAA9B;AACAtD,IAAAA,aAAa,CAACoB,QAAd,CAAuB,QAAvB,EAAiCkC,6BAAjC;AACA,UAAMvD,UAAU,CAACwD,YAAX,EAAN;AACA,UAAMvD,aAAa,CAACuD,YAAd,EAAN;AAEA,WAAOxE,WAAW,GAAGkB,WAAH,GAAiBA,WAAW,CAACuD,aAAZ,EAAnC;AACH,GAhGD,CAiGA,OAAOC,KAAP,EAAc;AACV,UAAM,oBAAkB;AAAEA,MAAAA;AAAF,KAAlB,CAAN;AACH;AACJ,CA/GD","sourcesContent":["import _ from 'lodash';\nimport {\n    MODEL_AGENT,\n    MODEL_CATEGORY,\n    MODEL_KEYWORD,\n    MODEL_SAYING,\n    STATUS_OUT_OF_DATE,\n    MODEL_ACTION\n} from '../../../util/constants';\nimport InvalidKeywordsFromAgent from '../../errors/global.invalid-keywords-from-agent';\nimport InvalidActionsFromAgent from '../../errors/global.invalid-actions-from-agent';\nimport RedisErrorHandler from '../../errors/redis.error-handler';\n\n//const logger = require('../../../server/util/logger')({ name: `service:agent:update-saying-in-category` });\n\nconst filterById = ({ models, ids }) => {\n\n    return _.filter(models, (model) => {\n        return _.includes(ids, model.id);\n    });\n};\n\nmodule.exports = async function (\n    {\n        id,\n        categoryId,\n        sayingId = null,\n        sayingData,\n        returnModel = false\n    }) {\n\n    const { redis } = this.server.app;\n    const { globalService, categoryService, keywordService, actionService } = await this.server.services();\n    try {\n\n        const modelPath = [MODEL_AGENT, MODEL_CATEGORY];\n        const modelPathIds = [id, categoryId, sayingId];\n        if (sayingId) {\n            modelPath.push(MODEL_SAYING);\n            modelPathIds.push(sayingId);\n        }\n\n        // Load Used Models\n        const models = await globalService.getAllModelsInPath({ modelPath, ids: modelPathIds, returnModel: true });\n        const AgentModel = models[MODEL_AGENT];\n        const CategoryModel = models[MODEL_CATEGORY];\n        const SayingModel = models[MODEL_SAYING] || await redis.factory(MODEL_SAYING); //Empty model if we are going to do a create\n\n        sayingData.keywords = _.sortBy(sayingData.keywords, (keyword) => keyword.start);\n\n        // Create lists of keywords and actions to be used later\n        let agentKeywordIds = await AgentModel.getAll(MODEL_KEYWORD, MODEL_KEYWORD);\n        let agentActionIds = await AgentModel.getAll(MODEL_ACTION, MODEL_ACTION);\n        agentKeywordIds = agentKeywordIds.map((agentKeywordId) => parseInt(agentKeywordId));\n        agentActionIds = agentActionIds.map((agentActionId) => agentActionId);\n        const keywordIds = keywordService.splitAddedOldRemovedIds({\n            oldKeywords: SayingModel.isLoaded ? _(SayingModel.property('keywords')) : [],\n            newKeywords: sayingData.keywords\n        });\n\n        const AgentActionsModels = await globalService.loadAllByIds({\n            ids: agentActionIds,\n            model: MODEL_ACTION,\n            returnModel: true\n        });\n\n        const actionIds = actionService.splitAddedOldRemovedIds({\n            oldActions: SayingModel.isLoaded ? SayingModel.property('actions') : [],\n            newActions: sayingData.actions,\n            AgentActionsModels\n        });\n\n        const notValidActionIds = _.difference(actionIds.added, agentActionIds);\n        if (notValidActionIds.length > 0) {\n            return Promise.reject(InvalidActionsFromAgent({ actionIds: notValidActionIds, agentId: AgentModel.id }));\n        }\n\n        // Validate if the new keywords belongs to the current Agent\n        const notValidIds = _.difference(keywordIds.addedNonSystem, agentKeywordIds);\n        if (notValidIds.length > 0) {\n            return Promise.reject(InvalidKeywordsFromAgent({ keywordIds: notValidIds, agentId: AgentModel.id }));\n        }\n\n        const FilteredKeywordModels = await globalService.loadAllByIds({\n            ids: [...keywordIds.added, ...keywordIds.removed], //Only load the keywords we are going to use\n            model: MODEL_KEYWORD,\n            returnModel: true\n        });\n\n        const newKeywordModelsNonSystem = filterById({ models: FilteredKeywordModels, ids: keywordIds.addedNonSystem });\n        const newKeywordModels = filterById({ models: FilteredKeywordModels, ids: keywordIds.added });\n        const removedKeywordModels = filterById({ models: FilteredKeywordModels, ids: keywordIds.removed });\n\n        const newActionModels = filterById({ models: AgentActionsModels, ids: actionIds.added });\n        const removedActionModels = filterById({ models: AgentActionsModels, ids: actionIds.removed });\n\n        const parentModels = [\n            AgentModel,\n            CategoryModel,\n            ...newKeywordModelsNonSystem,\n            ...newActionModels\n        ];\n        if (SayingModel.isLoaded) { //Update\n            // ADD Parent ---> Saying\n            await SayingModel.updateInstance({\n                data: sayingData,\n                parentModels,\n                removedParents: removedKeywordModels.concat(removedActionModels)\n            });\n            // ADD Category <---> UsedKeywords\n            await categoryService.linkKeywords({ model: CategoryModel, keywordModels: newKeywordModels });\n            // REMOVE Category <-/-> UnusedKeyword\n            await categoryService.unlinkKeywords({ model: CategoryModel, keywordModels: removedKeywordModels });\n        }\n        else { // Create\n            SayingModel.link(CategoryModel, MODEL_CATEGORY);\n            // ADD Parent ---> Saying\n            await SayingModel.createInstance({ data: sayingData, parentModels });\n            // ADD Category <---> NewKeyword\n            await categoryService.linkKeywords({ model: CategoryModel, keywordModels: newKeywordModels });\n        }\n\n        // Update status\n        AgentModel.property('status', STATUS_OUT_OF_DATE);\n        CategoryModel.property('status', STATUS_OUT_OF_DATE);\n        await AgentModel.saveInstance();\n        await CategoryModel.saveInstance();\n\n        return returnModel ? SayingModel : SayingModel.allProperties();\n    }\n    catch (error) {\n        throw RedisErrorHandler({ error });\n    }\n};\n"],"file":"agent.upsert-saying-in-category.service.js"}