{"version":3,"sources":["../../../../server/lib/services/agent/agent.update-by-id.service.js"],"names":["module","exports","id","data","returnModel","redis","server","app","AgentModel","factory","MODEL_AGENT","isLoaded","Promise","reject","model","requiresRetrain","extraTrainingData","undefined","property","enableModelsPerCategory","agentName","status","STATUS_OUT_OF_DATE","updateInstance","allProperties","error"],"mappings":";;AAAA;;AAIA;;AACA;;;;AAEAA,MAAM,CAACC,OAAP,GAAiB,gBAAgB;AAAEC,EAAAA,EAAF;AAAMC,EAAAA,IAAN;AAAYC,EAAAA,WAAW,GAAG;AAA1B,CAAhB,EAAmD;AAAA,QAExDC,KAFwD,GAE9C,KAAKC,MAAL,CAAYC,GAFkC,CAExDF,KAFwD;;AAGhE,MAAI;AACA,UAAMG,UAAU,GAAG,MAAMH,KAAK,CAACI,OAAN,CAAcC,sBAAd,EAA2BR,EAA3B,CAAzB;;AACA,QAAI,CAACM,UAAU,CAACG,QAAhB,EAA0B;AACtB,aAAOC,OAAO,CAACC,MAAR,CAAe,qBAAc;AAAEX,QAAAA,EAAF;AAAMY,QAAAA,KAAK,EAAEJ;AAAb,OAAd,CAAf,CAAP;AACH;;AAED,UAAMK,eAAe,GAEbZ,IAAI,CAACa,iBAAL,KAA2BC,SAA3B,IACAd,IAAI,CAACa,iBAAL,KAA2BR,UAAU,CAACU,QAAX,CAAoB,mBAApB,CAF/B,IAKIf,IAAI,CAACgB,uBAAL,KAAiCF,SAAjC,IACAd,IAAI,CAACgB,uBAAL,KAAiCX,UAAU,CAACU,QAAX,CAAoB,yBAApB,CANrC,IASIf,IAAI,CAACiB,SAAL,KAAmBH,SAAnB,IACAd,IAAI,CAACiB,SAAL,KAAmBZ,UAAU,CAACU,QAAX,CAAoB,WAApB,CAX3B;AAaAf,IAAAA,IAAI,CAACkB,MAAL,GAAcN,eAAe,GAAGO,6BAAH,GAAwBnB,IAAI,CAACkB,MAA1D,CAnBA,CAoBA;;AACA,UAAMb,UAAU,CAACe,cAAX,CAA0B;AAAEpB,MAAAA;AAAF,KAA1B,CAAN;AACA,WAAOC,WAAW,GAAGI,UAAH,GAAgBA,UAAU,CAACgB,aAAX,EAAlC;AACH,GAvBD,CAwBA,OAAOC,KAAP,EAAc;AACV,UAAM,oBAAkB;AAAEA,MAAAA;AAAF,KAAlB,CAAN;AACH;AACJ,CA9BD","sourcesContent":["import {\n    MODEL_AGENT,\n    STATUS_OUT_OF_DATE\n} from '../../../util/constants';\nimport NotFoundError from '../../errors/global.not-found-error';\nimport RedisErrorHandler from '../../errors/redis.error-handler';\n\nmodule.exports = async function ({ id, data, returnModel = false }) {\n\n    const { redis } = this.server.app;\n    try {\n        const AgentModel = await redis.factory(MODEL_AGENT, id);\n        if (!AgentModel.isLoaded) {\n            return Promise.reject(NotFoundError({ id, model: MODEL_AGENT }));\n        }\n\n        const requiresRetrain =\n            (\n                data.extraTrainingData !== undefined &&\n                data.extraTrainingData !== AgentModel.property('extraTrainingData')\n            ) ||\n            (\n                data.enableModelsPerCategory !== undefined &&\n                data.enableModelsPerCategory !== AgentModel.property('enableModelsPerCategory')\n            ) ||\n            (\n                data.agentName !== undefined &&\n                data.agentName !== AgentModel.property('agentName')\n            );\n        data.status = requiresRetrain ? STATUS_OUT_OF_DATE : data.status;\n        // TODO: Publish Agent update\n        await AgentModel.updateInstance({ data });\n        return returnModel ? AgentModel : AgentModel.allProperties();\n    }\n    catch (error) {\n        throw RedisErrorHandler({ error });\n    }\n};\n"],"file":"agent.update-by-id.service.js"}