{"version":3,"sources":["../../../../server/lib/services/keyword/keyword.parse-system-keywords.service.js"],"names":["module","exports","parseResult","spacyPretrainedEntities","ducklingDimension","server","services","keywordService","ducklingKeywords","parseSystemKeywordsDuckling","ducklingData","duckling","regexKeywords","parseSystemKeywordsRegex","regexData","regex","_","map","rasa","rasaResult","rasaKeywords","keywords","keyword","extractor","indexOf","toLowerCase","value","compact","union"],"mappings":";;AAAA;;;;AAEAA,MAAM,CAACC,OAAP,GAAiB,gBAAgB;AAAEC,EAAAA,WAAF;AAAeC,EAAAA,uBAAf;AAAwCC,EAAAA;AAAxC,CAAhB,EAA6E;AAAA,eAE/D,MAAM,KAAKC,MAAL,CAAYC,QAAZ,EAFyD;AAAA,QAElFC,cAFkF,QAElFA,cAFkF;;AAG1F,QAAMC,gBAAgB,GAAGD,cAAc,CAACE,2BAAf,CAA2C;AAAEC,IAAAA,YAAY,EAAER,WAAW,CAACS,QAA5B;AAAsCP,IAAAA;AAAtC,GAA3C,CAAzB;AACA,QAAMQ,aAAa,GAAGL,cAAc,CAACM,wBAAf,CAAwC;AAAEC,IAAAA,SAAS,EAAEZ,WAAW,CAACa;AAAzB,GAAxC,CAAtB;AAEA,SAAOC,gBAAEC,GAAF,CAAMf,WAAW,CAACgB,IAAlB,EAAyBC,UAAD,IAAgB;AAE3C,QAAIC,YAAY,GAAGJ,gBAAEC,GAAF,CAAME,UAAU,CAACE,QAAjB,EAA4BC,OAAD,IAAa;AAEvD,UAAIA,OAAO,CAACC,SAAR,KAAsB,WAA1B,EAAuC;AACnC,YAAIpB,uBAAuB,CAACqB,OAAxB,CAAgCF,OAAO,CAACA,OAAxC,MAAqD,CAAC,CAA1D,EAA6D;AACzDA,UAAAA,OAAO,CAACA,OAAR,GAAkB,eAAeA,OAAO,CAACA,OAAR,CAAgBG,WAAhB,EAAjC;AACH,SAFD,MAGK;AACD,iBAAO,IAAP;AACH;AACJ;;AACDH,MAAAA,OAAO,CAACI,KAAR,GAAgB;AACZA,QAAAA,KAAK,EAAEJ,OAAO,CAACI;AADH,OAAhB;AAGA,aAAOJ,OAAP;AACH,KAdkB,CAAnB;;AAgBAF,IAAAA,YAAY,GAAGJ,gBAAEW,OAAF,CAAUP,YAAV,CAAf,CAlB2C,CAmB3C;;AACAD,IAAAA,UAAU,CAACE,QAAX,GAAsBL,gBAAEY,KAAF,CAAQR,YAAR,EAAsBZ,gBAAtB,EAAwCI,aAAxC,CAAtB;AAEA,WAAOO,UAAP;AACH,GAvBM,CAAP;AAwBH,CA9BD","sourcesContent":["import _ from 'lodash';\n\nmodule.exports = async function ({ parseResult, spacyPretrainedEntities, ducklingDimension }) {\n\n    const { keywordService } = await this.server.services();\n    const ducklingKeywords = keywordService.parseSystemKeywordsDuckling({ ducklingData: parseResult.duckling, ducklingDimension });\n    const regexKeywords = keywordService.parseSystemKeywordsRegex({ regexData: parseResult.regex });\n\n    return _.map(parseResult.rasa, (rasaResult) => {\n\n        let rasaKeywords = _.map(rasaResult.keywords, (keyword) => {\n\n            if (keyword.extractor === 'ner_spacy') {\n                if (spacyPretrainedEntities.indexOf(keyword.keyword) !== -1) {\n                    keyword.keyword = 'sys.spacy_' + keyword.keyword.toLowerCase();\n                }\n                else {\n                    return null;\n                }\n            }\n            keyword.value = {\n                value: keyword.value\n            };\n            return keyword;\n        });\n\n        rasaKeywords = _.compact(rasaKeywords);\n        //TODO: IF there is more than one rasa result then this will contain repeated data\n        rasaResult.keywords = _.union(rasaKeywords, ducklingKeywords, regexKeywords);\n\n        return rasaResult;\n    });\n};\n"],"file":"keyword.parse-system-keywords.service.js"}