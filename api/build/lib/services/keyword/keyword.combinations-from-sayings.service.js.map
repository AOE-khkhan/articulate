{"version":3,"sources":["../../../../server/lib/services/keyword/keyword.combinations-from-sayings.service.js"],"names":["homogenize","combination","_","map","orderBy","join","removeDuplicatesAndRepeatedValues","keywordsCombinations","cleanKeywordsCombinations","uniqBy","filter","countOfDifferentTexts","countBy","length","Object","keys","module","exports","keywords","sayings","server","services","globalService","usedKeywordsBySayings","compact","uniq","saying","keyword","extractor","tuple","modifiersSayings","flatten","usedKeywordsByModifiers","usedKeywords","concat","combinations","Promise","all","key","tupleOfKeywords","split","keywordsList","matchedKeyword","fullKeyword","keywordName","examples","entry","synonyms","synonym","keywordValue","value","keywordText","Array","isArray","cartesianProduct"],"mappings":"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","sourcesContent":["import _ from 'lodash';\n\nconst homogenize = (combination) => {\n\n    return _.map(_.orderBy(combination, 'keywordText'), 'keywordText').join(',');\n};\n\nconst removeDuplicatesAndRepeatedValues = (keywordsCombinations) => {\n\n    let cleanKeywordsCombinations = _.uniqBy(keywordsCombinations, homogenize);\n\n    cleanKeywordsCombinations = _.filter(cleanKeywordsCombinations, (combination) => {\n\n        const countOfDifferentTexts = _.countBy(combination, 'keywordText');\n        return combination.length === Object.keys(countOfDifferentTexts).length;\n    });\n    return cleanKeywordsCombinations;\n};\n\nmodule.exports = async function ({ keywords, sayings }) {\n\n    const {  globalService  } = await this.server.services();\n\n    const usedKeywordsBySayings = _.compact(_.uniq(_.map(_.map(sayings, (saying) => {\n\n        if (saying.keywords) {\n            return _.compact(_.map(saying.keywords, (keyword) => {\n\n                return keyword.extractor ? null : keyword.keyword;\n            }));\n        }\n        return null;\n    }), (tuple) => {\n\n        return tuple.join('-');\n    })));\n\n    const modifiersSayings = _.flatten(_.map(_.flatten(_.map(keywords, 'modifiers')), 'sayings'));\n    const usedKeywordsByModifiers = _.compact(_.uniq(_.map(_.map(modifiersSayings, (saying) => {\n\n        if (saying.keywords) {\n            return _.compact(_.map(saying.keywords, (keyword) => {\n\n                return keyword.extractor ? null : keyword.keyword;\n            }));\n        }\n        return null;\n    }), (tuple) => {\n\n        return tuple.join('-');\n    })));\n\n    const usedKeywords = _.uniq(usedKeywordsBySayings.concat(usedKeywordsByModifiers));\n\n    const combinations = {};\n    await Promise.all(_.map(usedKeywords, async (key) => {\n\n        const tupleOfKeywords = key.split('-');\n\n        if (!combinations[key]) {\n\n            const keywordsList = _.map(tupleOfKeywords, (keyword) => {\n\n                const matchedKeyword = _.filter(keywords, (fullKeyword) => {\n\n                    return fullKeyword.keywordName === keyword;\n                })[0];\n                return _.flatten(_.map(matchedKeyword.examples, (entry) => {\n\n                    if (entry.synonyms && entry.synonyms.length > 0) {\n                        return _.map(entry.synonyms, (synonym) => {\n\n                            return { keywordValue: entry.value, keywordText: synonym };\n                        });\n                    }\n                    return [{ keywordValue: entry.value, keywordText: entry.value }];\n                }));\n            });\n\n            let keywordsCombinations;\n            if (keywordsList.length > 1 && Array.isArray(keywordsList[0])) {\n                keywordsCombinations = await globalService.cartesianProduct(keywordsList);\n                keywordsCombinations = removeDuplicatesAndRepeatedValues(keywordsCombinations);\n            }\n            else {\n                keywordsCombinations = keywordsList;\n            }\n\n            combinations[key] = keywordsCombinations;\n        }\n    }));\n\n    return combinations;\n};\n"],"file":"keyword.combinations-from-sayings.service.js"}