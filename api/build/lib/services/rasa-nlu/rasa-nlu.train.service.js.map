{"version":3,"sources":["../../../../server/lib/services/rasa-nlu/rasa-nlu.train.service.js"],"names":["module","exports","project","model","oldModel","trainingSet","pipeline","language","baseURL","rasaNLU","server","app","stringTrainingSet","JSON","stringify","payload","YAML","Train","Models","error","console","warn"],"mappings":";;AAAA;;AACA;;;;AAEAA,MAAM,CAACC,OAAP,GAAiB,gBACb;AACIC,EAAAA,OADJ;AAEIC,EAAAA,KAFJ;AAGIC,EAAAA,QAAQ,GAAG,IAHf;AAIIC,EAAAA,WAJJ;AAKIC,EAAAA,QALJ;AAMIC,EAAAA,QANJ;AAOIC,EAAAA,OAAO,GAAG;AAPd,CADa,EASV;AAAA,QAEmBC,OAFnB,GAE+B,KAAKC,MAAL,CAAYC,GAF3C,CAEO,UAFP;;AAIH,MAAI;AACA,UAAMC,iBAAiB,GAAGC,IAAI,CAACC,SAAL,CAAeT,WAAf,EAA4B,IAA5B,EAAkC,CAAlC,CAA1B;AACA,QAAIU,OAAO,GAAG;AACVR,MAAAA,QADU;AAEVD,MAAAA;AAFU,KAAd;AAIAS,IAAAA,OAAO,GAAGC,mBAAKF,SAAL,CAAeC,OAAf,CAAV;AACAA,IAAAA,OAAO,IAAK,WAAUH,iBAAkB,EAAxC;AACA,UAAMH,OAAO,CAACQ,KAAR,CAAc;AAChBf,MAAAA,OADgB;AAEhBC,MAAAA,KAFgB;AAGhBY,MAAAA,OAHgB;AAIhBP,MAAAA;AAJgB,KAAd,CAAN;;AAMA,QAAIJ,QAAJ,EAAc;AACV,UAAI;AACA,cAAMK,OAAO,CAACS,MAAR,CAAe;AACjBhB,UAAAA,OADiB;AAEjBC,UAAAA,KAAK,EAAEC,QAFU;AAGjBI,UAAAA;AAHiB,SAAf,CAAN;AAKH,OAND,CAOA,OAAOW,KAAP,EAAc;AACVC,QAAAA,OAAO,CAACC,IAAR,CAAc,0BAAyBjB,QAAS,iBAAgBe,KAAM,EAAtE;AACH;AACJ;AACJ,GA1BD,CA2BA,OAAOA,KAAP,EAAc;AACV,UAAM,oBAAkB;AAAEA,MAAAA;AAAF,KAAlB,CAAN;AACH;AACJ,CA3CD","sourcesContent":["import YAML from 'json2yaml';\nimport RedisErrorHandler from '../../errors/redis.error-handler';\n\nmodule.exports = async function (\n    {\n        project,\n        model,\n        oldModel = null,\n        trainingSet,\n        pipeline,\n        language,\n        baseURL = null\n    }) {\n\n    const { [`rasa-nlu`]: rasaNLU } = this.server.app;\n\n    try {\n        const stringTrainingSet = JSON.stringify(trainingSet, null, 2);\n        let payload = {\n            language,\n            pipeline\n        };\n        payload = YAML.stringify(payload);\n        payload += `  data: ${stringTrainingSet}`;\n        await rasaNLU.Train({\n            project,\n            model,\n            payload,\n            baseURL\n        });\n        if (oldModel) {\n            try {\n                await rasaNLU.Models({\n                    project,\n                    model: oldModel,\n                    baseURL\n                });\n            }\n            catch (error) {\n                console.warn(`Unable to unload model ${oldModel}. Error data: ${error}`);\n            }\n        }\n    }\n    catch (error) {\n        throw RedisErrorHandler({ error });\n    }\n};\n"],"file":"rasa-nlu.train.service.js"}