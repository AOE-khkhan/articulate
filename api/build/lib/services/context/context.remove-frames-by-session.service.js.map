{"version":3,"sources":["../../../../server/lib/services/context/context.remove-frames-by-session.service.js"],"names":["module","exports","sessionId","redis","server","app","services","globalService","Model","factory","MODEL_CONTEXT","findBySessionId","inDb","FrameModels","loadAllLinked","parentModel","model","MODEL_FRAME","returnModel","Promise","all","map","FrameModel","removeInstance","reject","id","error"],"mappings":";;AAAA;;AAIA;;AACA;;;;AAEAA,MAAM,CAACC,OAAP,GAAiB,gBAAgB;AAAEC,EAAAA;AAAF,CAAhB,EAA+B;AAAA,QAEpCC,KAFoC,GAE1B,KAAKC,MAAL,CAAYC,GAFc,CAEpCF,KAFoC;;AAAA,eAGlB,MAAM,KAAKC,MAAL,CAAYE,QAAZ,EAHY;AAAA,QAGpCC,aAHoC,QAGpCA,aAHoC;;AAK5C,MAAI;AACA,UAAMC,KAAK,GAAG,MAAML,KAAK,CAACM,OAAN,CAAcC,wBAAd,CAApB;AACA,UAAMF,KAAK,CAACG,eAAN,CAAsB;AAAET,MAAAA;AAAF,KAAtB,CAAN;;AAEA,QAAIM,KAAK,CAACI,IAAV,EAAgB;AACZ,YAAMC,WAAW,GAAG,MAAMN,aAAa,CAACO,aAAd,CAA4B;AAAEC,QAAAA,WAAW,EAAEP,KAAf;AAAsBQ,QAAAA,KAAK,EAAEC,sBAA7B;AAA0CC,QAAAA,WAAW,EAAE;AAAvD,OAA5B,CAA1B;AACA,aAAO,MAAMC,OAAO,CAACC,GAAR,CAAYP,WAAW,CAACQ,GAAZ,CAAgB,MAAOC,UAAP,IAAsB;AAE3D,cAAMA,UAAU,CAACC,cAAX,EAAN;AACH,OAHwB,CAAZ,CAAb;AAIH;;AACD,WAAOJ,OAAO,CAACK,MAAR,CAAe,qBAAqB;AAAER,MAAAA,KAAK,EAAEN,wBAAT;AAAwBe,MAAAA,EAAE,EAAEvB;AAA5B,KAArB,CAAf,CAAP;AAEH,GAbD,CAcA,OAAOwB,KAAP,EAAc;AACV,UAAM,oBAAkB;AAAEA,MAAAA;AAAF,KAAlB,CAAN;AACH;AACJ,CAtBD","sourcesContent":["import {\n    MODEL_CONTEXT,\n    MODEL_FRAME\n} from '../../../util/constants';\nimport NotFoundErrorHandler from '../../errors/global.not-found-error';\nimport RedisErrorHandler from '../../errors/redis.error-handler';\n\nmodule.exports = async function ({ sessionId }) {\n\n    const { redis } = this.server.app;\n    const { globalService } = await this.server.services();\n\n    try {\n        const Model = await redis.factory(MODEL_CONTEXT);\n        await Model.findBySessionId({ sessionId });\n\n        if (Model.inDb) {\n            const FrameModels = await globalService.loadAllLinked({ parentModel: Model, model: MODEL_FRAME, returnModel: true });\n            return await Promise.all(FrameModels.map(async (FrameModel) => {\n\n                await FrameModel.removeInstance();\n            }));\n        }\n        return Promise.reject(NotFoundErrorHandler({ model: MODEL_CONTEXT, id: sessionId }));\n\n    }\n    catch (error) {\n        throw RedisErrorHandler({ error });\n    }\n};\n"],"file":"context.remove-frames-by-session.service.js"}