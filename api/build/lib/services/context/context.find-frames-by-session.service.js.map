{"version":3,"sources":["../../../../server/lib/services/context/context.find-frames-by-session.service.js"],"names":["module","exports","sessionId","returnModel","skip","limit","direction","field","redis","server","app","Model","factory","MODEL_CONTEXT","services","globalService","findBySessionId","FrameModel","MODEL_FRAME","inDb","frameIds","getAll","FrameModels","findAllByIds","ids","frames","Promise","all","map","frameModel","saying","allProperties","reject","model","id","error"],"mappings":";;AAAA;;AAIA;;AACA;;;;AAEAA,MAAM,CAACC,OAAP,GAAiB,gBAAgB;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,WAAW,GAAG,KAA3B;AAAkCC,EAAAA,IAAlC;AAAwCC,EAAAA,KAAxC;AAA+CC,EAAAA,SAA/C;AAA0DC,EAAAA;AAA1D,CAAhB,EAAoF;AAAA,QAEzFC,KAFyF,GAE/E,KAAKC,MAAL,CAAYC,GAFmE,CAEzFF,KAFyF;AAGjG,QAAMG,KAAK,GAAG,MAAMH,KAAK,CAACI,OAAN,CAAcC,wBAAd,CAApB;;AAHiG,eAIvE,MAAM,KAAKJ,MAAL,CAAYK,QAAZ,EAJiE;AAAA,QAIzFC,aAJyF,QAIzFA,aAJyF;;AAKjG,MAAI;AACA,UAAMJ,KAAK,CAACK,eAAN,CAAsB;AAAEd,MAAAA;AAAF,KAAtB,CAAN;AACA,UAAMe,UAAU,GAAG,MAAMT,KAAK,CAACI,OAAN,CAAcM,sBAAd,CAAzB;;AACA,QAAIP,KAAK,CAACQ,IAAV,EAAgB;AACZ;AACA,UAAI,CAAChB,WAAL,EAAkB;AACd;AACA,cAAMiB,QAAQ,GAAG,MAAMT,KAAK,CAACU,MAAN,CAAaH,sBAAb,EAA0BA,sBAA1B,CAAvB;AAEA,cAAMI,WAAW,GAAG,MAAML,UAAU,CAACM,YAAX,CAAwB;AAAEC,UAAAA,GAAG,EAAEJ,QAAP;AAAiBhB,UAAAA,IAAjB;AAAuBC,UAAAA,KAAvB;AAA8BC,UAAAA,SAA9B;AAAyCC,UAAAA;AAAzC,SAAxB,CAA1B;AACA,cAAMkB,MAAM,GAAG,MAAMC,OAAO,CAACC,GAAR,CAAYL,WAAW,CAACM,GAAZ,CAAgB,MAAOC,UAAP,IAAsB;AAEnE,gBAAMC,MAAM,GAAG,MAAMD,UAAU,CAACE,aAAX,EAArB;AACA,iBAAOD,MAAP;AACH,SAJgC,CAAZ,CAArB;AAMA,eAAOL,MAAP;AACH;;AACD,aAAOtB,WAAW,GAAGQ,KAAH,GAAWA,KAAK,CAACoB,aAAN,EAA7B;AACH;;AACD,WAAOL,OAAO,CAACM,MAAR,CAAe,qBAAqB;AAAEC,MAAAA,KAAK,EAAEpB,wBAAT;AAAwBqB,MAAAA,EAAE,EAAEhC;AAA5B,KAArB,CAAf,CAAP;AAEH,GAtBD,CAuBA,OAAOiC,KAAP,EAAc;AACV,UAAM,oBAAkB;AAAEA,MAAAA;AAAF,KAAlB,CAAN;AACH;AACJ,CA/BD","sourcesContent":["import {\n    MODEL_CONTEXT,\n    MODEL_FRAME\n} from '../../../util/constants';\nimport NotFoundErrorHandler from '../../errors/global.not-found-error';\nimport RedisErrorHandler from '../../errors/redis.error-handler';\n\nmodule.exports = async function ({ sessionId, returnModel = false, skip, limit, direction, field  }) {\n\n    const { redis } = this.server.app;\n    const Model = await redis.factory(MODEL_CONTEXT);\n    const { globalService } = await this.server.services();\n    try {\n        await Model.findBySessionId({ sessionId });\n        const FrameModel = await redis.factory(MODEL_FRAME);\n        if (Model.inDb) {\n            //Only load frames if we are NOT returning the model, or else we can't create and object with a frames list.\n            if (!returnModel) {\n                // const frames = await globalService.loadAllLinked({ parentModel: Model, model: MODEL_FRAME, returnModel });\n                const frameIds = await Model.getAll(MODEL_FRAME, MODEL_FRAME);\n\n                const FrameModels = await FrameModel.findAllByIds({ ids: frameIds, skip, limit, direction, field });\n                const frames = await Promise.all(FrameModels.map(async (frameModel) => {\n\n                    const saying = await frameModel.allProperties();\n                    return saying;\n                }));\n\n                return frames;\n            }\n            return returnModel ? Model : Model.allProperties();\n        }\n        return Promise.reject(NotFoundErrorHandler({ model: MODEL_CONTEXT, id: sessionId }));\n\n    }\n    catch (error) {\n        throw RedisErrorHandler({ error });\n    }\n};\n"],"file":"context.find-frames-by-session.service.js"}