{"version":3,"sources":["../../../../server/lib/services/context/context.find-frame-by-session-and-frame.service.js"],"names":["module","exports","sessionId","frameId","returnModel","redis","server","app","services","globalService","Session","factory","MODEL_CONTEXT","findBySessionId","Frame","findById","id","model","MODEL_FRAME","inDb","belongs","belongsTo","allProperties","Promise","reject","error"],"mappings":";;AAAA;;AAIA;;AACA;;;;AAEAA,MAAM,CAACC,OAAP,GAAiB,gBAAgB;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,OAAb;AAAsBC,EAAAA,WAAW,GAAG;AAApC,CAAhB,EAA6D;AAAA,QAElEC,KAFkE,GAExD,KAAKC,MAAL,CAAYC,GAF4C,CAElEF,KAFkE;;AAAA,eAGhD,MAAM,KAAKC,MAAL,CAAYE,QAAZ,EAH0C;AAAA,QAGlEC,aAHkE,QAGlEA,aAHkE;;AAK1E,MAAI;AACA,UAAMC,OAAO,GAAG,MAAML,KAAK,CAACM,OAAN,CAAcC,wBAAd,CAAtB;AACA,UAAMF,OAAO,CAACG,eAAR,CAAwB;AAAEX,MAAAA;AAAF,KAAxB,CAAN;AACA,UAAMY,KAAK,GAAG,MAAML,aAAa,CAACM,QAAd,CAAuB;AAAEC,MAAAA,EAAE,EAAEb,OAAN;AAAec,MAAAA,KAAK,EAAEC,sBAAtB;AAAmCd,MAAAA,WAAW,EAAE;AAAhD,KAAvB,CAApB;;AAEA,QAAIM,OAAO,CAACS,IAAZ,EAAkB;AACd,UAAIL,KAAK,CAACK,IAAV,EAAgB;AACZ,cAAMC,OAAO,GAAG,MAAMV,OAAO,CAACW,SAAR,CAAmBP,KAAnB,EAA2BI,sBAA3B,CAAtB;;AAEA,YAAIE,OAAJ,EAAa;AACT,iBAAOhB,WAAW,GAAGU,KAAH,GAAWA,KAAK,CAACQ,aAAN,EAA7B;AACH;AACJ,OAND,MAOK;AACD,eAAOC,OAAO,CAACC,MAAR,CAAe,qBAAqB;AAAEP,UAAAA,KAAK,EAAEC,sBAAT;AAAsBF,UAAAA,EAAE,EAAEb;AAA1B,SAArB,CAAf,CAAP;AACH;AACJ,KAXD,MAYK;AACD,aAAOoB,OAAO,CAACC,MAAR,CAAe,qBAAqB;AAAEP,QAAAA,KAAK,EAAEL,wBAAT;AAAwBI,QAAAA,EAAE,EAAEd;AAA5B,OAArB,CAAf,CAAP;AACH;AACJ,GApBD,CAqBA,OAAOuB,KAAP,EAAc;AACV,UAAM,oBAAkB;AAAEA,MAAAA;AAAF,KAAlB,CAAN;AACH;AACJ,CA7BD","sourcesContent":["import {\n    MODEL_CONTEXT,\n    MODEL_FRAME\n} from '../../../util/constants';\nimport NotFoundErrorHandler from '../../errors/global.not-found-error';\nimport RedisErrorHandler from '../../errors/redis.error-handler';\n\nmodule.exports = async function ({ sessionId, frameId, returnModel = false }) {\n\n    const { redis } = this.server.app;\n    const { globalService } = await this.server.services();\n\n    try {\n        const Session = await redis.factory(MODEL_CONTEXT);\n        await Session.findBySessionId({ sessionId });\n        const Frame = await globalService.findById({ id: frameId, model: MODEL_FRAME, returnModel: true });\n\n        if (Session.inDb) {\n            if (Frame.inDb) {\n                const belongs = await Session.belongsTo( Frame , MODEL_FRAME);\n\n                if (belongs) {\n                    return returnModel ? Frame : Frame.allProperties();\n                }\n            }\n            else {\n                return Promise.reject(NotFoundErrorHandler({ model: MODEL_FRAME, id: frameId }));\n            }\n        }\n        else {\n            return Promise.reject(NotFoundErrorHandler({ model: MODEL_CONTEXT, id: sessionId }));\n        }\n    }\n    catch (error) {\n        throw RedisErrorHandler({ error });\n    }\n};\n"],"file":"context.find-frame-by-session-and-frame.service.js"}