{"version":3,"sources":["../../../../server/lib/services/context/context.find-by-session.service.js"],"names":["module","exports","sessionId","loadFrames","returnModel","redis","server","app","Model","factory","MODEL_CONTEXT","services","globalService","findBySessionId","inDb","frames","loadAllLinked","parentModel","model","MODEL_FRAME","context","allProperties","Promise","reject","id","error"],"mappings":";;AAAA;;AAIA;;AACA;;;;AAEAA,MAAM,CAACC,OAAP,GAAiB,gBAAgB;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,UAAU,GAAG,KAA1B;AAAiCC,EAAAA,WAAW,GAAG;AAA/C,CAAhB,EAAwE;AAAA,QAE7EC,KAF6E,GAEnE,KAAKC,MAAL,CAAYC,GAFuD,CAE7EF,KAF6E;AAGrF,QAAMG,KAAK,GAAG,MAAMH,KAAK,CAACI,OAAN,CAAcC,wBAAd,CAApB;;AAHqF,eAI3D,MAAM,KAAKJ,MAAL,CAAYK,QAAZ,EAJqD;AAAA,QAI7EC,aAJ6E,QAI7EA,aAJ6E;;AAKrF,MAAI;AACA,UAAMJ,KAAK,CAACK,eAAN,CAAsB;AAAEX,MAAAA;AAAF,KAAtB,CAAN;;AACA,QAAIM,KAAK,CAACM,IAAV,EAAgB;AACZ;AACA,UAAI,CAACV,WAAD,IAAgBD,UAApB,EAAgC;AAC5B,cAAMY,MAAM,GAAG,MAAMH,aAAa,CAACI,aAAd,CAA4B;AAAEC,UAAAA,WAAW,EAAET,KAAf;AAAsBU,UAAAA,KAAK,EAAEC,sBAA7B;AAA0Cf,UAAAA;AAA1C,SAA5B,CAArB;AACA,cAAMgB,OAAO,GAAGZ,KAAK,CAACa,aAAN,EAAhB;AACAD,QAAAA,OAAO,CAACL,MAAR,GAAiBA,MAAjB;AACA,eAAOK,OAAP;AACH;;AACD,aAAOhB,WAAW,GAAGI,KAAH,GAAWA,KAAK,CAACa,aAAN,EAA7B;AACH;;AACD,WAAOC,OAAO,CAACC,MAAR,CAAe,qBAAqB;AAAEL,MAAAA,KAAK,EAAER,wBAAT;AAAwBc,MAAAA,EAAE,EAAEtB;AAA5B,KAArB,CAAf,CAAP;AAEH,GAdD,CAeA,OAAOuB,KAAP,EAAc;AACV,UAAM,oBAAkB;AAAEA,MAAAA;AAAF,KAAlB,CAAN;AACH;AACJ,CAvBD","sourcesContent":["import {\n    MODEL_CONTEXT,\n    MODEL_FRAME\n} from '../../../util/constants';\nimport NotFoundErrorHandler from '../../errors/global.not-found-error';\nimport RedisErrorHandler from '../../errors/redis.error-handler';\n\nmodule.exports = async function ({ sessionId, loadFrames = false, returnModel = false }) {\n\n    const { redis } = this.server.app;\n    const Model = await redis.factory(MODEL_CONTEXT);\n    const { globalService } = await this.server.services();\n    try {\n        await Model.findBySessionId({ sessionId });\n        if (Model.inDb) {\n            //Only load frames if we are NOT returning the model, or else we can't create and object with a frames list.\n            if (!returnModel && loadFrames) {\n                const frames = await globalService.loadAllLinked({ parentModel: Model, model: MODEL_FRAME, returnModel });\n                const context = Model.allProperties();\n                context.frames = frames;\n                return context;\n            }\n            return returnModel ? Model : Model.allProperties();\n        }\n        return Promise.reject(NotFoundErrorHandler({ model: MODEL_CONTEXT, id: sessionId }));\n\n    }\n    catch (error) {\n        throw RedisErrorHandler({ error });\n    }\n};\n"],"file":"context.find-by-session.service.js"}