{"version":3,"sources":["../../../../server/lib/services/saying/saying.remove.service.js"],"names":["module","exports","id","SayingModel","AgentModel","CategoryModel","redis","server","app","services","categoryService","globalService","Promise","reject","message","factory","MODEL_SAYING","removedKeywordIds","_","map","property","removedKeywordModels","loadAllByIds","ids","model","MODEL_KEYWORD","returnModel","unlinkKeywords","keywordModels","STATUS_OUT_OF_DATE","saveInstance","removeInstance","error"],"mappings":";;AAAA;;AACA;;AAKA;;AACA;;;;AAEAA,MAAM,CAACC,OAAP,GAAiB,gBAAgB;AAAEC,EAAAA,EAAE,GAAG,IAAP;AAAaC,EAAAA,WAAW,GAAG,IAA3B;AAAiCC,EAAAA,UAAjC;AAA6CC,EAAAA;AAA7C,CAAhB,EAA8E;AAAA,QAEnFC,KAFmF,GAEzE,KAAKC,MAAL,CAAYC,GAF6D,CAEnFF,KAFmF;;AAAA,gCAGhD,KAAKC,MAAL,CAAYE,QAAZ,EAHgD;AAAA,QAGnFC,eAHmF,yBAGnFA,eAHmF;AAAA,QAGlEC,aAHkE,yBAGlEA,aAHkE;;AAI3F,MAAIT,EAAE,KAAK,IAAP,IAAeC,WAAW,KAAK,IAAnC,EAAyC;AACrC,WAAOS,OAAO,CAACC,MAAR,CAAe,qBAAmB;AACrCC,MAAAA,OAAO,EAAE;AAD4B,KAAnB,CAAf,CAAP;AAGH;;AACD,MAAI;AACAX,IAAAA,WAAW,GAAGA,WAAW,KAAI,MAAMG,KAAK,CAACS,OAAN,CAAcC,uBAAd,EAA4Bd,EAA5B,CAAV,CAAzB;;AACA,UAAMe,iBAAiB,GAAGC,gBAAEC,GAAF,CAAMhB,WAAW,CAACiB,QAAZ,CAAqB,UAArB,CAAN,EAAwC,WAAxC,CAA1B;;AACA,UAAMC,oBAAoB,GAAG,MAAMV,aAAa,CAACW,YAAd,CAA2B;AAC1DC,MAAAA,GAAG,EAAEN,iBADqD;AAClC;AACxBO,MAAAA,KAAK,EAAEC,wBAFmD;AAG1DC,MAAAA,WAAW,EAAE;AAH6C,KAA3B,CAAnC;AAKA,UAAMhB,eAAe,CAACiB,cAAhB,CAA+B;AAAEH,MAAAA,KAAK,EAAEnB,aAAT;AAAwBuB,MAAAA,aAAa,EAAEP;AAAvC,KAA/B,CAAN,CARA,CAUA;;AACAjB,IAAAA,UAAU,CAACgB,QAAX,CAAoB,QAApB,EAA8BS,6BAA9B;AACAxB,IAAAA,aAAa,CAACe,QAAd,CAAuB,QAAvB,EAAiCS,6BAAjC;AACA,UAAMzB,UAAU,CAAC0B,YAAX,EAAN;AACA,UAAMzB,aAAa,CAACyB,YAAd,EAAN;AACA,WAAO,MAAM3B,WAAW,CAAC4B,cAAZ,EAAb;AACH,GAhBD,CAiBA,OAAOC,KAAP,EAAc;AACV,UAAM,oBAAkB;AAAEA,MAAAA,KAAF;AAASlB,MAAAA,OAAO,EAAG,GAAEW,wBAAc,QAAOvB,EAAG;AAA7C,KAAlB,CAAN;AACH;AAEJ,CA9BD","sourcesContent":["import _ from 'lodash';\nimport {\n    MODEL_KEYWORD,\n    MODEL_SAYING,\n    STATUS_OUT_OF_DATE\n} from '../../../util/constants';\nimport GlobalDefaultError from '../../errors/global.default-error';\nimport RedisErrorHandler from '../../errors/redis.error-handler';\n\nmodule.exports = async function ({ id = null, SayingModel = null, AgentModel, CategoryModel }) {\n\n    const { redis } = this.server.app;\n    const { categoryService, globalService } = this.server.services();\n    if (id === null && SayingModel === null) {\n        return Promise.reject(GlobalDefaultError({\n            message: 'Saying id or model needed'\n        }));\n    }\n    try {\n        SayingModel = SayingModel || await redis.factory(MODEL_SAYING, id);\n        const removedKeywordIds = _.map(SayingModel.property('keywords'), 'keywordId');\n        const removedKeywordModels = await globalService.loadAllByIds({\n            ids: removedKeywordIds, //Only load the keywords we are going to use\n            model: MODEL_KEYWORD,\n            returnModel: true\n        });\n        await categoryService.unlinkKeywords({ model: CategoryModel, keywordModels: removedKeywordModels });\n\n        // Update status\n        AgentModel.property('status', STATUS_OUT_OF_DATE);\n        CategoryModel.property('status', STATUS_OUT_OF_DATE);\n        await AgentModel.saveInstance();\n        await CategoryModel.saveInstance();\n        return await SayingModel.removeInstance();\n    }\n    catch (error) {\n        throw RedisErrorHandler({ error, message: `${MODEL_KEYWORD} id=[${id}]` });\n    }\n\n};\n"],"file":"saying.remove.service.js"}