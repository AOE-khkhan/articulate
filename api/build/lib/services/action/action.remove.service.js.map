{"version":3,"sources":["../../../../server/lib/services/action/action.remove.service.js"],"names":["module","exports","id","redis","server","app","services","postFormatService","webhookService","ActionModel","factory","MODEL_ACTION","findById","actionSayingIds","getAll","MODEL_SAYING","length","actionName","allProperties","Promise","reject","statusCode","message","postFormatIds","MODEL_POST_FORMAT","webhookIds","MODEL_WEBHOOK","removePostFormatPromises","map","postFormatId","remove","all","removeWebhookPromises","webhookId","removeInstance","error"],"mappings":";;AAAA;;AAMA;;AACA;;;;AAEAA,MAAM,CAACC,OAAP,GAAiB,gBAAgB;AAAEC,EAAAA;AAAF,CAAhB,EAAwB;AAAA,QAE7BC,KAF6B,GAEnB,KAAKC,MAAL,CAAYC,GAFO,CAE7BF,KAF6B;;AAAA,eAGS,MAAM,KAAKC,MAAL,CAAYE,QAAZ,EAHf;AAAA,QAG7BC,iBAH6B,QAG7BA,iBAH6B;AAAA,QAGVC,cAHU,QAGVA,cAHU;;AAIrC,QAAMC,WAAW,GAAG,MAAMN,KAAK,CAACO,OAAN,CAAcC,uBAAd,CAA1B;;AACA,MAAI;AAEA,UAAMF,WAAW,CAACG,QAAZ,CAAqB;AAAEV,MAAAA;AAAF,KAArB,CAAN;AACA,UAAMW,eAAe,GAAG,MAAMJ,WAAW,CAACK,MAAZ,CAAmBC,uBAAnB,EAAiCA,uBAAjC,CAA9B;;AACA,QAAIF,eAAe,CAACG,MAAhB,GAAyB,CAA7B,EAAgC;AAC5B,YAAMC,UAAU,GAAG,MAAMR,WAAW,CAACS,aAAZ,GAA4BD,UAArD;AACA,aAAOE,OAAO,CAACC,MAAR,CAAe,qBAAmB;AACrCC,QAAAA,UAAU,EAAE,GADyB;AAErCC,QAAAA,OAAO,EAAG,WAAUL,UAAW,qBAAoBJ,eAAe,CAACG,MAAO;AAFrC,OAAnB,CAAf,CAAP;AAIH;;AACD,UAAMO,aAAa,GAAG,MAAMd,WAAW,CAACK,MAAZ,CAAmBU,4BAAnB,EAAsCA,4BAAtC,CAA5B;AACA,UAAMC,UAAU,GAAG,MAAMhB,WAAW,CAACK,MAAZ,CAAmBY,wBAAnB,EAAkCA,wBAAlC,CAAzB;AACA,UAAMC,wBAAwB,GAAGJ,aAAa,CAACK,GAAd,CAAkB,MAAOC,YAAP,IAAwB;AAEvE,aAAO,MAAMtB,iBAAiB,CAACuB,MAAlB,CAAyB;AAAE5B,QAAAA,EAAE,EAAE2B;AAAN,OAAzB,CAAb;AACH,KAHgC,CAAjC;AAIA,UAAMV,OAAO,CAACY,GAAR,CAAYJ,wBAAZ,CAAN;AAEA,UAAMK,qBAAqB,GAAGP,UAAU,CAACG,GAAX,CAAe,MAAOK,SAAP,IAAqB;AAE9D,aAAO,MAAMzB,cAAc,CAACsB,MAAf,CAAsB;AAAE5B,QAAAA,EAAE,EAAE+B;AAAN,OAAtB,CAAb;AACH,KAH6B,CAA9B;AAIA,UAAMd,OAAO,CAACY,GAAR,CAAYC,qBAAZ,CAAN;AACA,WAAOvB,WAAW,CAACyB,cAAZ,CAA2B;AAAEhC,MAAAA;AAAF,KAA3B,CAAP;AACH,GAzBD,CA0BA,OAAOiC,KAAP,EAAc;AACV,UAAM,oBAAkB;AAAEA,MAAAA,KAAF;AAASb,MAAAA,OAAO,EAAG,GAAEX,uBAAa,QAAOT,EAAG;AAA5C,KAAlB,CAAN;AACH;AAEJ,CAnCD","sourcesContent":["import {\n    MODEL_ACTION,\n    MODEL_POST_FORMAT,\n    MODEL_WEBHOOK,\n    MODEL_SAYING\n} from '../../../util/constants';\nimport RedisErrorHandler from '../../errors/redis.error-handler';\nimport GlobalDefaultError from '../../errors/global.default-error';\n\nmodule.exports = async function ({ id }) {\n\n    const { redis } = this.server.app;\n    const { postFormatService, webhookService } = await this.server.services();\n    const ActionModel = await redis.factory(MODEL_ACTION);\n    try {\n\n        await ActionModel.findById({ id });\n        const actionSayingIds = await ActionModel.getAll(MODEL_SAYING, MODEL_SAYING);\n        if (actionSayingIds.length > 0) {\n            const actionName = await ActionModel.allProperties().actionName;\n            return Promise.reject(GlobalDefaultError({\n                statusCode: 400,\n                message: `Action '${actionName}' is been used by ${actionSayingIds.length} sayings`\n            }));\n        }\n        const postFormatIds = await ActionModel.getAll(MODEL_POST_FORMAT, MODEL_POST_FORMAT);\n        const webhookIds = await ActionModel.getAll(MODEL_WEBHOOK, MODEL_WEBHOOK);\n        const removePostFormatPromises = postFormatIds.map(async (postFormatId) => {\n\n            return await postFormatService.remove({ id: postFormatId });\n        });\n        await Promise.all(removePostFormatPromises);\n\n        const removeWebhookPromises = webhookIds.map(async (webhookId) => {\n\n            return await webhookService.remove({ id: webhookId });\n        });\n        await Promise.all(removeWebhookPromises);\n        return ActionModel.removeInstance({ id });\n    }\n    catch (error) {\n        throw RedisErrorHandler({ error, message: `${MODEL_ACTION} id=[${id}]` });\n    }\n\n};\n"],"file":"action.remove.service.js"}