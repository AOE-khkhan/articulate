{"version":3,"sources":["../../../../server/lib/services/action/action.upsert.service.js"],"names":["filterById","models","ids","_","filter","model","includes","id","module","exports","data","actionId","AgentModel","returnModel","redis","server","app","services","globalService","keywordService","ActionModel","factory","MODEL_ACTION","agentKeywordIds","getAll","MODEL_KEYWORD","keywordIds","splitAddedOldRemovedIds","oldKeywords","isLoaded","property","newKeywords","keywords","notValidIds","difference","addedNonSystem","length","Promise","reject","agentId","FilteredKeywordModels","loadAllByIds","added","removed","newKeywordModelsNonSystem","removedKeywordModels","parentModels","actionName","undefined","STATUS_OUT_OF_DATE","saveInstance","updateInstance","removedParents","createInstance","allProperties","error"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport {\n    MODEL_ACTION,\n    MODEL_KEYWORD,\n    STATUS_OUT_OF_DATE\n} from '../../../util/constants';\nimport InvalidKeywordsFromAgent from '../../errors/global.invalid-keywords-from-agent';\nimport RedisErrorHandler from '../../errors/redis.error-handler';\n\nconst filterById = ({ models, ids }) => _.filter(models, (model) => _.includes(ids, model.id));\n\nmodule.exports = async function ({ data, actionId, AgentModel = null, returnModel = false }) {\n\n    const { redis } = this.server.app;\n    const { globalService, keywordService } = await this.server.services();\n\n    try {\n        const ActionModel = await redis.factory(MODEL_ACTION, actionId);\n\n        // Create lists of keywords to be used later\n        const agentKeywordIds = await AgentModel.getAll(MODEL_KEYWORD, MODEL_KEYWORD);\n        const keywordIds = keywordService.splitAddedOldRemovedIds({\n            oldKeywords: ActionModel.isLoaded ? _(ActionModel.property('slots')) : [],\n            newKeywords: data.keywords\n        });\n\n        // Validate if the new keywords belongs to the current Agent\n        const notValidIds = _.difference(keywordIds.addedNonSystem, agentKeywordIds);\n        if (notValidIds.length > 0) {\n            return Promise.reject(InvalidKeywordsFromAgent({ keywordIds: notValidIds, agentId: AgentModel.id }));\n        }\n\n        const FilteredKeywordModels = await globalService.loadAllByIds({\n            ids: [...keywordIds.added, ...keywordIds.removed], //Only load the keywords we are going to use\n            model: MODEL_KEYWORD,\n            returnModel: true\n        });\n\n        const newKeywordModelsNonSystem = filterById({ models: FilteredKeywordModels, ids: keywordIds.addedNonSystem });\n        const removedKeywordModels = filterById({ models: FilteredKeywordModels, ids: keywordIds.removed });\n\n        const parentModels = [\n            AgentModel,\n            ...newKeywordModelsNonSystem\n        ];\n\n        if (ActionModel.isLoaded) { //Update\n            if ((data.actionName !== undefined && ActionModel.property('actionName') !== data.actionName)){\n                AgentModel.property('status', STATUS_OUT_OF_DATE);\n            }\n            await AgentModel.saveInstance();\n            await ActionModel.updateInstance({\n                data,\n                parentModels,\n                removedParents: removedKeywordModels\n            });\n        }\n        else { // Create\n            await ActionModel.createInstance({ data, parentModels });\n        }\n\n        return returnModel ? ActionModel : ActionModel.allProperties();\n    }\n    catch (error) {\n        throw RedisErrorHandler({ error });\n    }\n};\n"],"file":"action.upsert.service.js"}